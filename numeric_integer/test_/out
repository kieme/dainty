In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h: In function ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator==(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’:
../impl_/dainty_base_numeric_impl.h:560:19: error: no match for ‘operator==’ (operand types are ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} and ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’})
  560 |     return (lh.ix == rh.ix) && (logical::get(lh.bit) == logical::get(rh.bit));
      |             ~~~~~ ^~ ~~~~~
      |                |        |
      |                |        t_logical<[...],[...],[...]>
      |                t_logical<[...],[...],[...]>
../impl_/dainty_base_numeric_impl.h:560:19: note: candidate: ‘operator==(int, int)’ <built-in>
  560 |     return (lh.ix == rh.ix) && (logical::get(lh.bit) == logical::get(rh.bit));
      |             ~~~~~~^~~~~~~~
../impl_/dainty_base_numeric_impl.h:560:19: note:   no known conversion for argument 2 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘int’
../impl_/dainty_base_numeric_impl.h:559:10: note: candidate: ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator==(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |          ^~~~~~~~
../impl_/dainty_base_numeric_impl.h:559:27: note:   no known conversion for argument 1 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘dainty::base::numeric::impl_::R_pos’ {aka ‘const dainty::base::numeric::impl_::t_pos&’}
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |                     ~~~~~~^~
../impl_/dainty_base_numeric_impl.h: In function ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator<(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’:
../impl_/dainty_base_numeric_impl.h:566:18: error: no match for ‘operator<’ (operand types are ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} and ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’})
  566 |     return lh.ix < rh.ix || (lh.ix == rh.ix &&
      |            ~~~~~ ^ ~~~~~
      |               |       |
      |               |       t_logical<[...],[...],[...]>
      |               t_logical<[...],[...],[...]>
../impl_/dainty_base_numeric_impl.h:566:18: note: candidate: ‘operator<(int, int)’ <built-in>
  566 |     return lh.ix < rh.ix || (lh.ix == rh.ix &&
      |            ~~~~~~^~~~~~~
../impl_/dainty_base_numeric_impl.h:566:18: note:   no known conversion for argument 2 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘int’
../impl_/dainty_base_numeric_impl.h:565:10: note: candidate: ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator<(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’
  565 |   t_bool operator<(R_pos lh, R_pos rh) noexcept {
      |          ^~~~~~~~
../impl_/dainty_base_numeric_impl.h:565:26: note:   no known conversion for argument 1 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘dainty::base::numeric::impl_::R_pos’ {aka ‘const dainty::base::numeric::impl_::t_pos&’}
  565 |   t_bool operator<(R_pos lh, R_pos rh) noexcept {
      |                    ~~~~~~^~
../impl_/dainty_base_numeric_impl.h:566:36: error: no match for ‘operator==’ (operand types are ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} and ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’})
  566 |     return lh.ix < rh.ix || (lh.ix == rh.ix &&
      |                              ~~~~~ ^~ ~~~~~
      |                                 |        |
      |                                 |        t_logical<[...],[...],[...]>
      |                                 t_logical<[...],[...],[...]>
../impl_/dainty_base_numeric_impl.h:566:36: note: candidate: ‘operator==(int, int)’ <built-in>
  566 |     return lh.ix < rh.ix || (lh.ix == rh.ix &&
      |                              ~~~~~~^~~~~~~~
../impl_/dainty_base_numeric_impl.h:566:36: note:   no known conversion for argument 2 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘int’
../impl_/dainty_base_numeric_impl.h:559:10: note: candidate: ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator==(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |          ^~~~~~~~
../impl_/dainty_base_numeric_impl.h:559:27: note:   no known conversion for argument 1 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘dainty::base::numeric::impl_::R_pos’ {aka ‘const dainty::base::numeric::impl_::t_pos&’}
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |                     ~~~~~~^~
../impl_/dainty_base_numeric_impl.h: In function ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator<=(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’:
../impl_/dainty_base_numeric_impl.h:573:19: error: no match for ‘operator<’ (operand types are ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} and ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’})
  573 |     return  lh.ix < rh.ix || (lh.ix == rh.ix &&
      |             ~~~~~ ^ ~~~~~
      |                |       |
      |                |       t_logical<[...],[...],[...]>
      |                t_logical<[...],[...],[...]>
../impl_/dainty_base_numeric_impl.h:573:19: note: candidate: ‘operator<(int, int)’ <built-in>
  573 |     return  lh.ix < rh.ix || (lh.ix == rh.ix &&
      |             ~~~~~~^~~~~~~
../impl_/dainty_base_numeric_impl.h:573:19: note:   no known conversion for argument 2 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘int’
../impl_/dainty_base_numeric_impl.h:565:10: note: candidate: ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator<(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’
  565 |   t_bool operator<(R_pos lh, R_pos rh) noexcept {
      |          ^~~~~~~~
../impl_/dainty_base_numeric_impl.h:565:26: note:   no known conversion for argument 1 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘dainty::base::numeric::impl_::R_pos’ {aka ‘const dainty::base::numeric::impl_::t_pos&’}
  565 |   t_bool operator<(R_pos lh, R_pos rh) noexcept {
      |                    ~~~~~~^~
../impl_/dainty_base_numeric_impl.h:573:37: error: no match for ‘operator==’ (operand types are ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} and ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’})
  573 |     return  lh.ix < rh.ix || (lh.ix == rh.ix &&
      |                               ~~~~~ ^~ ~~~~~
      |                                  |        |
      |                                  |        t_logical<[...],[...],[...]>
      |                                  t_logical<[...],[...],[...]>
../impl_/dainty_base_numeric_impl.h:573:37: note: candidate: ‘operator==(int, int)’ <built-in>
  573 |     return  lh.ix < rh.ix || (lh.ix == rh.ix &&
      |                               ~~~~~~^~~~~~~~
../impl_/dainty_base_numeric_impl.h:573:37: note:   no known conversion for argument 2 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘int’
../impl_/dainty_base_numeric_impl.h:559:10: note: candidate: ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::operator==(dainty::base::numeric::impl_::R_pos, dainty::base::numeric::impl_::R_pos)’
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |          ^~~~~~~~
../impl_/dainty_base_numeric_impl.h:559:27: note:   no known conversion for argument 1 from ‘const t_ix’ {aka ‘const dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_ix_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_id_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > >’} to ‘dainty::base::numeric::impl_::R_pos’ {aka ‘const dainty::base::numeric::impl_::t_pos&’}
  559 |   t_bool operator==(R_pos lh, R_pos rh) noexcept {
      |                     ~~~~~~^~
../impl_/dainty_base_numeric_impl.h: In member function ‘dainty::base::numeric::impl_::t_bit dainty::base::numeric::impl_::t_impl_base_::first_on_bit(dainty::base::numeric::impl_::R_store_) const’:
../impl_/dainty_base_numeric_impl.h:1158:33: error: ‘mk’ was not declared in this scope
 1158 |     return pos ? pos.bit_ix() : mk<t_bit>(get_bits(store));
      |                                 ^~
../impl_/dainty_base_numeric_impl.h:1158:33: note: suggested alternatives:
In file included from ../../util/dainty_base_util.h:32,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../specific/dainty_base_specific.h:294:5: note:   ‘dainty::base::specific::mk’
  294 |   E mk(t_specific<T, TAG, CHECK> src) noexcept {
      |     ^~
In file included from ../../util/dainty_base_util.h:33,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../logical/dainty_base_logical.h:1234:5: note:   ‘dainty::base::logical::mk’
 1234 |   L mk(t_logical<T, TAG, Ls...> logical) noexcept {
      |     ^~
In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h:1158:41: error: expected primary-expression before ‘>’ token
 1158 |     return pos ? pos.bit_ix() : mk<t_bit>(get_bits(store));
      |                                         ^
../impl_/dainty_base_numeric_impl.h: In member function ‘dainty::base::numeric::impl_::t_bit dainty::base::numeric::impl_::t_impl_base_::last_on_bit(dainty::base::numeric::impl_::R_store_) const’:
../impl_/dainty_base_numeric_impl.h:1165:33: error: ‘mk’ was not declared in this scope
 1165 |     return pos ? pos.bit_ix() : mk<t_bit>(get_bits(store));
      |                                 ^~
../impl_/dainty_base_numeric_impl.h:1165:33: note: suggested alternatives:
In file included from ../../util/dainty_base_util.h:32,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../specific/dainty_base_specific.h:294:5: note:   ‘dainty::base::specific::mk’
  294 |   E mk(t_specific<T, TAG, CHECK> src) noexcept {
      |     ^~
In file included from ../../util/dainty_base_util.h:33,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../logical/dainty_base_logical.h:1234:5: note:   ‘dainty::base::logical::mk’
 1234 |   L mk(t_logical<T, TAG, Ls...> logical) noexcept {
      |     ^~
In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h:1165:41: error: expected primary-expression before ‘>’ token
 1165 |     return pos ? pos.bit_ix() : mk<t_bit>(get_bits(store));
      |                                         ^
../impl_/dainty_base_numeric_impl.h: In member function ‘constexpr dainty::base::types::t_bool dainty::base::numeric::impl_::t_info::is_neg() const’:
../impl_/dainty_base_numeric_impl.h:1235:35: warning: comparison of integer expressions of different signedness: ‘long int’ and ‘long unsigned int’ [-Wsign-compare]
 1235 |     return logical::get(max_bits) ==
      |            ~~~~~~~~~~~~~~~~~~~~~~~^~
 1236 |              ((logical::get(msb_on.ix)*BITS_UNIT_) + logical::get(msb_on.bit));
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from dainty_base_numeric_test1.cpp:4:
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:57:27: error: ‘r_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
   57 |   using r_binary = types::r_prefix_of<t_binary>;
      |                           ^~~~~~~~~~~
      |                           t_prefix
../dainty_base_numeric.h:58:27: error: ‘x_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
   58 |   using x_binary = types::x_prefix_of<t_binary>;
      |                           ^~~~~~~~~~~
      |                           t_prefix
../dainty_base_numeric.h:59:27: error: ‘R_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
   59 |   using R_binary = types::R_prefix_of<t_binary>;
      |                           ^~~~~~~~~~~
      |                           t_prefix
../dainty_base_numeric.h:66:13: warning: unnecessary parentheses in declaration of ‘R_binary’ [-Wparentheses]
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |             ^
../dainty_base_numeric.h:66:22: error: field ‘R_binary’ has incomplete type ‘dainty::base::numeric::t_binary’
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:61:9: note: definition of ‘class dainty::base::numeric::t_binary’ is not complete until the closing brace
   61 |   class t_binary {
      |         ^~~~~~~~
../dainty_base_numeric.h:66:30: error: expected ‘;’ at end of member declaration
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                              ^
      |                               ;
../dainty_base_numeric.h:66:32: error: expected unqualified-id before ‘noexcept’
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                                ^~~~~~~~
../dainty_base_numeric.h:67:22: error: ‘R_binary’ is not a type
   67 |     t_binary(t_bits, R_binary) noexcept; // BIN_METHOD_1_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:68:13: warning: unnecessary parentheses in declaration of ‘x_binary’ [-Wparentheses]
   68 |     t_binary(        x_binary) noexcept; // BIN_METHOD_1_5_
      |             ^
../dainty_base_numeric.h:68:22: error: field ‘x_binary’ has incomplete type ‘dainty::base::numeric::t_binary’
   68 |     t_binary(        x_binary) noexcept; // BIN_METHOD_1_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:61:9: note: definition of ‘class dainty::base::numeric::t_binary’ is not complete until the closing brace
   61 |   class t_binary {
      |         ^~~~~~~~
../dainty_base_numeric.h:68:30: error: expected ‘;’ at end of member declaration
   68 |     t_binary(        x_binary) noexcept; // BIN_METHOD_1_5_
      |                              ^
      |                               ;
../dainty_base_numeric.h:68:32: error: expected unqualified-id before ‘noexcept’
   68 |     t_binary(        x_binary) noexcept; // BIN_METHOD_1_5_
      |                                ^~~~~~~~
../dainty_base_numeric.h:69:22: error: ‘x_binary’ is not a type
   69 |     t_binary(t_bits, x_binary) noexcept; // BIN_METHOD_1_6_
      |                      ^~~~~~~~
../dainty_base_numeric.h:69:5: error: ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’ cannot be overloaded with ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’
   69 |     t_binary(t_bits, x_binary) noexcept; // BIN_METHOD_1_6_
      |     ^~~~~~~~
../dainty_base_numeric.h:67:5: note: previous declaration ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’
   67 |     t_binary(t_bits, R_binary) noexcept; // BIN_METHOD_1_4_
      |     ^~~~~~~~
../dainty_base_numeric.h:83:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   83 |     r_binary operator=(R_binary) noexcept; // BIN_METHOD_2_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:84:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   84 |     r_binary operator=(x_binary) noexcept; // BIN_METHOD_2_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:87:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   87 |     r_binary operator=(T)        noexcept; // BIN_METHOD_2_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:89:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   89 |     r_binary operator=(T)        noexcept; // BIN_METHOD_2_4_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:93:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   93 |     r_binary operator+=(R_binary) noexcept; // BIN_METHOD_3_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:96:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   96 |     r_binary operator+=(T)        noexcept; // BIN_METHOD_3_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:98:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
   98 |     r_binary operator+=(T)        noexcept; // BIN_METHOD_3_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:102:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  102 |     r_binary operator-=(R_binary) noexcept; // BIN_METHOD_4_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:105:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  105 |     r_binary operator-=(T)        noexcept; // BIN_METHOD_4_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:107:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  107 |     r_binary operator-=(T)        noexcept; // BIN_METHOD_4_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:111:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  111 |     r_binary operator*=(R_binary) noexcept; // BIN_METHOD_5_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:114:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  114 |     r_binary operator*=(T)        noexcept; // BIN_METHOD_5_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:116:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  116 |     r_binary operator*=(T)        noexcept; // BIN_METHOD_5_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:120:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  120 |     r_binary operator/=(R_binary) noexcept; // BIN_METHOD_6_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:123:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  123 |     r_binary operator/=(T)        noexcept; // BIN_METHOD_6_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:125:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  125 |     r_binary operator/=(T)        noexcept; // BIN_METHOD_6_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:129:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  129 |     r_binary operator&=(R_binary) noexcept; // BIN_METHOD_7_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:132:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  132 |     r_binary operator&=(T)        noexcept; // BIN_METHOD_7_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:134:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  134 |     r_binary operator&=(T)        noexcept; // BIN_METHOD_7_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:138:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  138 |     r_binary operator|=(R_binary) noexcept; // BIN_METHOD_8_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:141:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  141 |     r_binary operator|=(T)        noexcept; // BIN_METHOD_8_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:143:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  143 |     r_binary operator|=(T)        noexcept; // BIN_METHOD_8_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:147:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  147 |     r_binary operator^=(R_binary) noexcept; // BIN_METHOD_9_1_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:150:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  150 |     r_binary operator^=(T)        noexcept; // BIN_METHOD_9_2_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:152:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  152 |     r_binary operator^=(T)        noexcept; // BIN_METHOD_9_3_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:158:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  158 |     r_binary operator>>=(t_bits)       noexcept; // BIN_METHOD_12_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:159:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  159 |     r_binary operator<<=(t_bits)       noexcept; // BIN_METHOD_13_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:161:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  161 |     r_binary ones_complement()         noexcept; // BIN_METHOD_14_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:162:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  162 |     r_binary twos_complement()         noexcept; // BIN_METHOD_15_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:164:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  164 |     r_binary shift_left(t_bits)        noexcept; // BIN_METHOD_16_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:165:5: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  165 |     r_binary shift_right(t_bits)       noexcept; // BIN_METHOD_17_
      |     ^~~~~~~~
      |     t_binary
../dainty_base_numeric.h:186:26: error: ‘R_binary’ is not a type
  186 |     t_bool reset(        R_binary) noexcept; // BIN_METHOD_32_2_
      |                          ^~~~~~~~
../dainty_base_numeric.h:187:26: error: ‘R_binary’ is not a type
  187 |     t_bool reset(t_bits, R_binary) noexcept; // BIN_METHOD_32_3_
      |                          ^~~~~~~~
../dainty_base_numeric.h:200:21: error: ‘R_binary’ is not a type
  200 |     t_bool is_equal(R_binary) const noexcept; // BIN_METHOD_33_1_
      |                     ^~~~~~~~
../dainty_base_numeric.h:209:20: error: ‘R_binary’ is not a type
  209 |     t_bool is_less(R_binary) const noexcept; // BIN_METHOD_34_1_
      |                    ^~~~~~~~
../dainty_base_numeric.h:218:26: error: ‘R_binary’ is not a type
  218 |     t_bool is_less_equal(R_binary) const noexcept; // BIN_METHOD_35_1_
      |                          ^~~~~~~~
../dainty_base_numeric.h:242:28: error: ‘r_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
  242 |   using r_integer = types::r_prefix_of<t_integer>;
      |                            ^~~~~~~~~~~
      |                            t_prefix
../dainty_base_numeric.h:243:28: error: ‘x_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
  243 |   using x_integer = types::x_prefix_of<t_integer>;
      |                            ^~~~~~~~~~~
      |                            t_prefix
../dainty_base_numeric.h:244:28: error: ‘R_prefix_of’ in namespace ‘dainty::base::types’ does not name a template type; did you mean ‘t_prefix’?
  244 |   using R_integer = types::R_prefix_of<t_integer>;
      |                            ^~~~~~~~~~~
      |                            t_prefix
../dainty_base_numeric.h:251:14: warning: unnecessary parentheses in declaration of ‘R_integer’ [-Wparentheses]
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |              ^
../dainty_base_numeric.h:251:25: error: field ‘R_integer’ has incomplete type ‘dainty::base::numeric::t_integer’
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:246:9: note: definition of ‘class dainty::base::numeric::t_integer’ is not complete until the closing brace
  246 |   class t_integer {
      |         ^~~~~~~~~
../dainty_base_numeric.h:251:34: error: expected ‘;’ at end of member declaration
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                                  ^
      |                                   ;
../dainty_base_numeric.h:251:36: error: expected unqualified-id before ‘noexcept’
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                                    ^~~~~~~~
../dainty_base_numeric.h:252:25: error: ‘R_integer’ is not a type
  252 |     t_integer(t_digits, R_integer) noexcept; // INT_METHOD_1_4_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:253:14: warning: unnecessary parentheses in declaration of ‘x_integer’ [-Wparentheses]
  253 |     t_integer(          x_integer) noexcept; // INT_METHOD_1_5_
      |              ^
../dainty_base_numeric.h:253:25: error: field ‘x_integer’ has incomplete type ‘dainty::base::numeric::t_integer’
  253 |     t_integer(          x_integer) noexcept; // INT_METHOD_1_5_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:246:9: note: definition of ‘class dainty::base::numeric::t_integer’ is not complete until the closing brace
  246 |   class t_integer {
      |         ^~~~~~~~~
../dainty_base_numeric.h:253:34: error: expected ‘;’ at end of member declaration
  253 |     t_integer(          x_integer) noexcept; // INT_METHOD_1_5_
      |                                  ^
      |                                   ;
../dainty_base_numeric.h:253:36: error: expected unqualified-id before ‘noexcept’
  253 |     t_integer(          x_integer) noexcept; // INT_METHOD_1_5_
      |                                    ^~~~~~~~
../dainty_base_numeric.h:254:25: error: ‘x_integer’ is not a type
  254 |     t_integer(t_digits, x_integer) noexcept; // INT_METHOD_1_6_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:254:5: error: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ cannot be overloaded with ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  254 |     t_integer(t_digits, x_integer) noexcept; // INT_METHOD_1_6_
      |     ^~~~~~~~~
../dainty_base_numeric.h:252:5: note: previous declaration ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  252 |     t_integer(t_digits, R_integer) noexcept; // INT_METHOD_1_4_
      |     ^~~~~~~~~
../dainty_base_numeric.h:256:14: warning: unnecessary parentheses in declaration of ‘R_binary’ [-Wparentheses]
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |              ^
../dainty_base_numeric.h:256:25: error: field ‘R_binary’ has incomplete type ‘dainty::base::numeric::t_integer’
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:246:9: note: definition of ‘class dainty::base::numeric::t_integer’ is not complete until the closing brace
  246 |   class t_integer {
      |         ^~~~~~~~~
../dainty_base_numeric.h:256:33: error: expected ‘;’ at end of member declaration
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                                 ^
      |                                  ;
../dainty_base_numeric.h:256:36: error: expected unqualified-id before ‘noexcept’
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                                    ^~~~~~~~
../dainty_base_numeric.h:257:25: error: ‘R_binary’ is not a type
  257 |     t_integer(t_digits, R_binary)  noexcept; // INT_METHOD_1_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:257:5: error: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ cannot be overloaded with ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  257 |     t_integer(t_digits, R_binary)  noexcept; // INT_METHOD_1_8_
      |     ^~~~~~~~~
../dainty_base_numeric.h:252:5: note: previous declaration ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  252 |     t_integer(t_digits, R_integer) noexcept; // INT_METHOD_1_4_
      |     ^~~~~~~~~
../dainty_base_numeric.h:258:14: warning: unnecessary parentheses in declaration of ‘x_binary’ [-Wparentheses]
  258 |     t_integer(          x_binary)  noexcept; // INT_METHOD_1_9_
      |              ^
../dainty_base_numeric.h:258:25: error: field ‘x_binary’ has incomplete type ‘dainty::base::numeric::t_integer’
  258 |     t_integer(          x_binary)  noexcept; // INT_METHOD_1_9_
      |                         ^~~~~~~~
../dainty_base_numeric.h:246:9: note: definition of ‘class dainty::base::numeric::t_integer’ is not complete until the closing brace
  246 |   class t_integer {
      |         ^~~~~~~~~
../dainty_base_numeric.h:258:33: error: expected ‘;’ at end of member declaration
  258 |     t_integer(          x_binary)  noexcept; // INT_METHOD_1_9_
      |                                 ^
      |                                  ;
../dainty_base_numeric.h:258:36: error: expected unqualified-id before ‘noexcept’
  258 |     t_integer(          x_binary)  noexcept; // INT_METHOD_1_9_
      |                                    ^~~~~~~~
../dainty_base_numeric.h:259:25: error: ‘x_binary’ is not a type
  259 |     t_integer(t_digits, x_binary)  noexcept; // INT_METHOD_1_10_
      |                         ^~~~~~~~
../dainty_base_numeric.h:259:5: error: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ cannot be overloaded with ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  259 |     t_integer(t_digits, x_binary)  noexcept; // INT_METHOD_1_10_
      |     ^~~~~~~~~
../dainty_base_numeric.h:252:5: note: previous declaration ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
  252 |     t_integer(t_digits, R_integer) noexcept; // INT_METHOD_1_4_
      |     ^~~~~~~~~
../dainty_base_numeric.h:268:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  268 |     r_integer operator=(R_integer) noexcept; // INT_METHOD_2_1_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:269:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  269 |     r_integer operator=(x_integer) noexcept; // INT_METHOD_2_2_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:271:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  271 |     r_integer operator=(R_binary)  noexcept; // INT_METHOD_2_3_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:272:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  272 |     r_integer operator=(x_binary)  noexcept; // INT_METHOD_2_4_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:275:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  275 |     r_integer operator=(T)         noexcept; // INT_METHOD_2_5_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:279:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  279 |     r_integer operator+=(R_integer) noexcept; // INT_METHOD_3_1_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:280:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  280 |     r_integer operator+=(R_binary)  noexcept; // INT_METHOD_3_2_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:283:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  283 |     r_integer operator+=(T)         noexcept; // INT_METHOD_3_3_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:287:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  287 |     r_integer operator-=(R_integer) noexcept; // INT_METHOD_4_1_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:288:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  288 |     r_integer operator-=(R_binary)  noexcept; // INT_METHOD_4_2_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:291:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  291 |     r_integer operator-=(T)         noexcept; // INT_METHOD_4_3_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:295:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  295 |     r_integer operator*=(R_integer) noexcept; // INT_METHOD_5_1_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:296:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  296 |     r_integer operator*=(R_binary)  noexcept; // INT_METHOD_5_2_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:299:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  299 |     r_integer operator*=(T)         noexcept; // INT_METHOD_5_3_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:303:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  303 |     r_integer operator/=(R_integer) noexcept; // INT_METHOD_6_1_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:304:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  304 |     r_integer operator/=(R_binary)  noexcept; // INT_METHOD_6_2_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:307:5: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
  307 |     r_integer operator/=(T)         noexcept; // INT_METHOD_6_3_
      |     ^~~~~~~~~
      |     t_integer
../dainty_base_numeric.h:318:14: error: expected type-specifier before ‘x_binary’
  318 |     operator x_binary() &&    noexcept; // INT_METHOD_11_1_
      |              ^~~~~~~~
../dainty_base_numeric.h:319:14: error: expected type-specifier before ‘R_binary’
  319 |     operator R_binary() const noexcept; // INT_METHOD_11_2_
      |              ^~~~~~~~
../dainty_base_numeric.h:325:28: error: ‘R_integer’ is not a type
  325 |     t_bool reset(          R_integer) noexcept; // INT_METHOD_12_2_
      |                            ^~~~~~~~~
../dainty_base_numeric.h:326:28: error: ‘R_integer’ is not a type
  326 |     t_bool reset(t_digits, R_integer) noexcept; // INT_METHOD_12_3_
      |                            ^~~~~~~~~
../dainty_base_numeric.h:327:28: error: ‘R_binary’ is not a type
  327 |     t_bool reset(          R_binary)  noexcept; // INT_METHOD_12_4_
      |                            ^~~~~~~~
../dainty_base_numeric.h:327:12: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(int)’ cannot be overloaded with ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(int)’
  327 |     t_bool reset(          R_binary)  noexcept; // INT_METHOD_12_4_
      |            ^~~~~
../dainty_base_numeric.h:325:12: note: previous declaration ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(int)’
  325 |     t_bool reset(          R_integer) noexcept; // INT_METHOD_12_2_
      |            ^~~~~
../dainty_base_numeric.h:328:28: error: ‘R_binary’ is not a type
  328 |     t_bool reset(t_digits, R_binary)  noexcept; // INT_METHOD_12_5_
      |                            ^~~~~~~~
../dainty_base_numeric.h:328:12: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(dainty::base::numeric::impl_::t_digits, int)’ cannot be overloaded with ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(dainty::base::numeric::impl_::t_digits, int)’
  328 |     t_bool reset(t_digits, R_binary)  noexcept; // INT_METHOD_12_5_
      |            ^~~~~
../dainty_base_numeric.h:326:12: note: previous declaration ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(dainty::base::numeric::impl_::t_digits, int)’
  326 |     t_bool reset(t_digits, R_integer) noexcept; // INT_METHOD_12_3_
      |            ^~~~~
../dainty_base_numeric.h:337:21: error: ‘R_integer’ is not a type
  337 |     t_bool is_equal(R_integer) const noexcept; // INT_METHOD_13_1_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:338:21: error: ‘R_binary’ is not a type
  338 |     t_bool is_equal(R_binary)  const noexcept; // INT_METHOD_13_2_
      |                     ^~~~~~~~
../dainty_base_numeric.h:338:12: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_equal(int) const’ cannot be overloaded with ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_equal(int) const’
  338 |     t_bool is_equal(R_binary)  const noexcept; // INT_METHOD_13_2_
      |            ^~~~~~~~
../dainty_base_numeric.h:337:12: note: previous declaration ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_equal(int) const’
  337 |     t_bool is_equal(R_integer) const noexcept; // INT_METHOD_13_1_
      |            ^~~~~~~~
../dainty_base_numeric.h:345:20: error: ‘R_integer’ is not a type
  345 |     t_bool is_less(R_integer) const noexcept; // INT_METHOD_14_1_
      |                    ^~~~~~~~~
../dainty_base_numeric.h:346:20: error: ‘R_binary’ is not a type
  346 |     t_bool is_less(R_binary)  const noexcept; // INT_METHOD_14_2_
      |                    ^~~~~~~~
../dainty_base_numeric.h:346:12: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less(int) const’ cannot be overloaded with ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less(int) const’
  346 |     t_bool is_less(R_binary)  const noexcept; // INT_METHOD_14_2_
      |            ^~~~~~~
../dainty_base_numeric.h:345:12: note: previous declaration ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less(int) const’
  345 |     t_bool is_less(R_integer) const noexcept; // INT_METHOD_14_1_
      |            ^~~~~~~
../dainty_base_numeric.h:353:26: error: ‘R_integer’ is not a type
  353 |     t_bool is_less_equal(R_integer) const noexcept; // INT_METHOD_15_1_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:354:26: error: ‘R_binary’ is not a type
  354 |     t_bool is_less_equal(R_binary)  const noexcept; // INT_METHOD_15_2_
      |                          ^~~~~~~~
../dainty_base_numeric.h:354:12: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less_equal(int) const’ cannot be overloaded with ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less_equal(int) const’
  354 |     t_bool is_less_equal(R_binary)  const noexcept; // INT_METHOD_15_2_
      |            ^~~~~~~~~~~~~
../dainty_base_numeric.h:353:12: note: previous declaration ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less_equal(int) const’
  353 |     t_bool is_less_equal(R_integer) const noexcept; // INT_METHOD_15_1_
      |            ^~~~~~~~~~~~~
../dainty_base_numeric.h:379:22: error: declaration of ‘operator+’ as non-function
  379 |   t_binary operator+(R_binary, R_binary) noexcept; // BIN_FUNC_1_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:379:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  379 |   t_binary operator+(R_binary, R_binary) noexcept; // BIN_FUNC_1_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:379:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  379 |   t_binary operator+(R_binary, R_binary) noexcept; // BIN_FUNC_1_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:380:22: error: declaration of ‘operator+’ as non-function
  380 |   t_binary operator+(x_binary, R_binary) noexcept; // BIN_FUNC_1_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:380:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  380 |   t_binary operator+(x_binary, R_binary) noexcept; // BIN_FUNC_1_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:380:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  380 |   t_binary operator+(x_binary, R_binary) noexcept; // BIN_FUNC_1_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:381:22: error: declaration of ‘operator+’ as non-function
  381 |   t_binary operator+(R_binary, x_binary) noexcept; // BIN_FUNC_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:381:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  381 |   t_binary operator+(R_binary, x_binary) noexcept; // BIN_FUNC_1_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:381:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  381 |   t_binary operator+(R_binary, x_binary) noexcept; // BIN_FUNC_1_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:382:22: error: declaration of ‘operator+’ as non-function
  382 |   t_binary operator+(x_binary, x_binary) noexcept; // BIN_FUNC_1_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:382:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  382 |   t_binary operator+(x_binary, x_binary) noexcept; // BIN_FUNC_1_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:382:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  382 |   t_binary operator+(x_binary, x_binary) noexcept; // BIN_FUNC_1_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:385:22: error: declaration of ‘operator+’ as non-function
  385 |   t_binary operator+(R_binary, T)        noexcept; // BIN_FUNC_1_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:385:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  385 |   t_binary operator+(R_binary, T)        noexcept; // BIN_FUNC_1_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:385:33: error: expected primary-expression before ‘)’ token
  385 |   t_binary operator+(R_binary, T)        noexcept; // BIN_FUNC_1_5_
      |                                 ^
../dainty_base_numeric.h:387:25: error: ‘R_binary’ has not been declared
  387 |   t_binary operator+(T, R_binary)        noexcept; // BIN_FUNC_1_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:389:22: error: declaration of ‘operator+’ as non-function
  389 |   t_binary operator+(x_binary, T)        noexcept; // BIN_FUNC_1_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:389:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  389 |   t_binary operator+(x_binary, T)        noexcept; // BIN_FUNC_1_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:389:33: error: expected primary-expression before ‘)’ token
  389 |   t_binary operator+(x_binary, T)        noexcept; // BIN_FUNC_1_7_
      |                                 ^
../dainty_base_numeric.h:391:25: error: ‘x_binary’ has not been declared
  391 |   t_binary operator+(T, x_binary)        noexcept; // BIN_FUNC_1_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:395:22: error: declaration of ‘operator-’ as non-function
  395 |   t_binary operator-(R_binary, R_binary) noexcept; // BIN_FUNC_2_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:395:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  395 |   t_binary operator-(R_binary, R_binary) noexcept; // BIN_FUNC_2_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:395:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  395 |   t_binary operator-(R_binary, R_binary) noexcept; // BIN_FUNC_2_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:396:22: error: declaration of ‘operator-’ as non-function
  396 |   t_binary operator-(x_binary, R_binary) noexcept; // BIN_FUNC_2_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:396:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  396 |   t_binary operator-(x_binary, R_binary) noexcept; // BIN_FUNC_2_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:396:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  396 |   t_binary operator-(x_binary, R_binary) noexcept; // BIN_FUNC_2_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:397:22: error: declaration of ‘operator-’ as non-function
  397 |   t_binary operator-(R_binary, x_binary) noexcept; // BIN_FUNC_2_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:397:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  397 |   t_binary operator-(R_binary, x_binary) noexcept; // BIN_FUNC_2_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:397:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  397 |   t_binary operator-(R_binary, x_binary) noexcept; // BIN_FUNC_2_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:398:22: error: declaration of ‘operator-’ as non-function
  398 |   t_binary operator-(x_binary, x_binary) noexcept; // BIN_FUNC_2_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:398:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  398 |   t_binary operator-(x_binary, x_binary) noexcept; // BIN_FUNC_2_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:398:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  398 |   t_binary operator-(x_binary, x_binary) noexcept; // BIN_FUNC_2_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:401:22: error: declaration of ‘operator-’ as non-function
  401 |   t_binary operator-(R_binary, T)        noexcept; // BIN_FUNC_2_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:401:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  401 |   t_binary operator-(R_binary, T)        noexcept; // BIN_FUNC_2_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:401:33: error: expected primary-expression before ‘)’ token
  401 |   t_binary operator-(R_binary, T)        noexcept; // BIN_FUNC_2_5_
      |                                 ^
../dainty_base_numeric.h:403:25: error: ‘R_binary’ has not been declared
  403 |   t_binary operator-(T, R_binary)        noexcept; // BIN_FUNC_2_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:405:22: error: declaration of ‘operator-’ as non-function
  405 |   t_binary operator-(x_binary, T)        noexcept; // BIN_FUNC_2_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:405:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  405 |   t_binary operator-(x_binary, T)        noexcept; // BIN_FUNC_2_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:405:33: error: expected primary-expression before ‘)’ token
  405 |   t_binary operator-(x_binary, T)        noexcept; // BIN_FUNC_2_7_
      |                                 ^
../dainty_base_numeric.h:407:25: error: ‘x_binary’ has not been declared
  407 |   t_binary operator-(T, x_binary)        noexcept; // BIN_FUNC_2_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:411:22: error: declaration of ‘operator*’ as non-function
  411 |   t_binary operator*(R_binary, R_binary) noexcept; // BIN_FUNC_3_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:411:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  411 |   t_binary operator*(R_binary, R_binary) noexcept; // BIN_FUNC_3_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:411:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  411 |   t_binary operator*(R_binary, R_binary) noexcept; // BIN_FUNC_3_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:412:22: error: declaration of ‘operator*’ as non-function
  412 |   t_binary operator*(x_binary, R_binary) noexcept; // BIN_FUNC_3_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:412:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  412 |   t_binary operator*(x_binary, R_binary) noexcept; // BIN_FUNC_3_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:412:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  412 |   t_binary operator*(x_binary, R_binary) noexcept; // BIN_FUNC_3_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:413:22: error: declaration of ‘operator*’ as non-function
  413 |   t_binary operator*(R_binary, x_binary) noexcept; // BIN_FUNC_3_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:413:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  413 |   t_binary operator*(R_binary, x_binary) noexcept; // BIN_FUNC_3_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:413:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  413 |   t_binary operator*(R_binary, x_binary) noexcept; // BIN_FUNC_3_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:414:22: error: declaration of ‘operator*’ as non-function
  414 |   t_binary operator*(x_binary, x_binary) noexcept; // BIN_FUNC_3_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:414:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  414 |   t_binary operator*(x_binary, x_binary) noexcept; // BIN_FUNC_3_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:414:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  414 |   t_binary operator*(x_binary, x_binary) noexcept; // BIN_FUNC_3_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:417:22: error: declaration of ‘operator*’ as non-function
  417 |   t_binary operator*(R_binary, T)        noexcept; // BIN_FUNC_3_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:417:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  417 |   t_binary operator*(R_binary, T)        noexcept; // BIN_FUNC_3_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:417:33: error: expected primary-expression before ‘)’ token
  417 |   t_binary operator*(R_binary, T)        noexcept; // BIN_FUNC_3_5_
      |                                 ^
../dainty_base_numeric.h:419:25: error: ‘R_binary’ has not been declared
  419 |   t_binary operator*(T, R_binary)        noexcept; // BIN_FUNC_3_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:421:22: error: declaration of ‘operator*’ as non-function
  421 |   t_binary operator*(x_binary, T)        noexcept; // BIN_FUNC_3_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:421:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  421 |   t_binary operator*(x_binary, T)        noexcept; // BIN_FUNC_3_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:421:33: error: expected primary-expression before ‘)’ token
  421 |   t_binary operator*(x_binary, T)        noexcept; // BIN_FUNC_3_7_
      |                                 ^
../dainty_base_numeric.h:423:25: error: ‘x_binary’ has not been declared
  423 |   t_binary operator*(T, x_binary)        noexcept; // BIN_FUNC_3_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:427:22: error: declaration of ‘operator/’ as non-function
  427 |   t_binary operator/(R_binary, R_binary) noexcept; // BIN_FUNC_4_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:427:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  427 |   t_binary operator/(R_binary, R_binary) noexcept; // BIN_FUNC_4_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:427:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  427 |   t_binary operator/(R_binary, R_binary) noexcept; // BIN_FUNC_4_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:428:22: error: declaration of ‘operator/’ as non-function
  428 |   t_binary operator/(x_binary, R_binary) noexcept; // BIN_FUNC_4_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:428:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  428 |   t_binary operator/(x_binary, R_binary) noexcept; // BIN_FUNC_4_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:428:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  428 |   t_binary operator/(x_binary, R_binary) noexcept; // BIN_FUNC_4_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:429:22: error: declaration of ‘operator/’ as non-function
  429 |   t_binary operator/(R_binary, x_binary) noexcept; // BIN_FUNC_4_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:429:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  429 |   t_binary operator/(R_binary, x_binary) noexcept; // BIN_FUNC_4_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:429:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  429 |   t_binary operator/(R_binary, x_binary) noexcept; // BIN_FUNC_4_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:430:22: error: declaration of ‘operator/’ as non-function
  430 |   t_binary operator/(x_binary, x_binary) noexcept; // BIN_FUNC_4_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:430:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  430 |   t_binary operator/(x_binary, x_binary) noexcept; // BIN_FUNC_4_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:430:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  430 |   t_binary operator/(x_binary, x_binary) noexcept; // BIN_FUNC_4_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:433:22: error: declaration of ‘operator/’ as non-function
  433 |   t_binary operator/(R_binary, T)        noexcept; // BIN_FUNC_4_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:433:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  433 |   t_binary operator/(R_binary, T)        noexcept; // BIN_FUNC_4_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:433:33: error: expected primary-expression before ‘)’ token
  433 |   t_binary operator/(R_binary, T)        noexcept; // BIN_FUNC_4_5_
      |                                 ^
../dainty_base_numeric.h:435:25: error: ‘R_binary’ has not been declared
  435 |   t_binary operator/(T, R_binary)        noexcept; // BIN_FUNC_4_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:437:22: error: declaration of ‘operator/’ as non-function
  437 |   t_binary operator/(x_binary, T)        noexcept; // BIN_FUNC_4_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:437:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  437 |   t_binary operator/(x_binary, T)        noexcept; // BIN_FUNC_4_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:437:33: error: expected primary-expression before ‘)’ token
  437 |   t_binary operator/(x_binary, T)        noexcept; // BIN_FUNC_4_7_
      |                                 ^
../dainty_base_numeric.h:439:25: error: ‘x_binary’ has not been declared
  439 |   t_binary operator/(T, x_binary)        noexcept; // BIN_FUNC_4_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:443:22: error: declaration of ‘operator|’ as non-function
  443 |   t_binary operator|(R_binary, R_binary) noexcept; // BIN_FUNC_5_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:443:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  443 |   t_binary operator|(R_binary, R_binary) noexcept; // BIN_FUNC_5_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:443:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  443 |   t_binary operator|(R_binary, R_binary) noexcept; // BIN_FUNC_5_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:444:22: error: declaration of ‘operator|’ as non-function
  444 |   t_binary operator|(x_binary, R_binary) noexcept; // BIN_FUNC_5_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:444:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  444 |   t_binary operator|(x_binary, R_binary) noexcept; // BIN_FUNC_5_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:444:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  444 |   t_binary operator|(x_binary, R_binary) noexcept; // BIN_FUNC_5_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:445:22: error: declaration of ‘operator|’ as non-function
  445 |   t_binary operator|(R_binary, x_binary) noexcept; // BIN_FUNC_5_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:445:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  445 |   t_binary operator|(R_binary, x_binary) noexcept; // BIN_FUNC_5_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:445:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  445 |   t_binary operator|(R_binary, x_binary) noexcept; // BIN_FUNC_5_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:446:22: error: declaration of ‘operator|’ as non-function
  446 |   t_binary operator|(x_binary, x_binary) noexcept; // BIN_FUNC_5_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:446:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  446 |   t_binary operator|(x_binary, x_binary) noexcept; // BIN_FUNC_5_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:446:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  446 |   t_binary operator|(x_binary, x_binary) noexcept; // BIN_FUNC_5_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:449:22: error: declaration of ‘operator|’ as non-function
  449 |   t_binary operator|(R_binary, T)        noexcept; // BIN_FUNC_5_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:449:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  449 |   t_binary operator|(R_binary, T)        noexcept; // BIN_FUNC_5_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:449:33: error: expected primary-expression before ‘)’ token
  449 |   t_binary operator|(R_binary, T)        noexcept; // BIN_FUNC_5_5_
      |                                 ^
../dainty_base_numeric.h:451:25: error: ‘R_binary’ has not been declared
  451 |   t_binary operator|(T, R_binary)        noexcept; // BIN_FUNC_5_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:453:22: error: declaration of ‘operator|’ as non-function
  453 |   t_binary operator|(x_binary, T)        noexcept; // BIN_FUNC_5_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:453:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  453 |   t_binary operator|(x_binary, T)        noexcept; // BIN_FUNC_5_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:453:33: error: expected primary-expression before ‘)’ token
  453 |   t_binary operator|(x_binary, T)        noexcept; // BIN_FUNC_5_7_
      |                                 ^
../dainty_base_numeric.h:455:25: error: ‘x_binary’ has not been declared
  455 |   t_binary operator|(T, x_binary)        noexcept; // BIN_FUNC_5_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:459:22: error: declaration of ‘operator&’ as non-function
  459 |   t_binary operator&(R_binary, R_binary) noexcept; // BIN_FUNC_6_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:459:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  459 |   t_binary operator&(R_binary, R_binary) noexcept; // BIN_FUNC_6_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:459:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  459 |   t_binary operator&(R_binary, R_binary) noexcept; // BIN_FUNC_6_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:460:22: error: declaration of ‘operator&’ as non-function
  460 |   t_binary operator&(x_binary, R_binary) noexcept; // BIN_FUNC_6_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:460:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  460 |   t_binary operator&(x_binary, R_binary) noexcept; // BIN_FUNC_6_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:460:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  460 |   t_binary operator&(x_binary, R_binary) noexcept; // BIN_FUNC_6_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:461:22: error: declaration of ‘operator&’ as non-function
  461 |   t_binary operator&(R_binary, x_binary) noexcept; // BIN_FUNC_6_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:461:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  461 |   t_binary operator&(R_binary, x_binary) noexcept; // BIN_FUNC_6_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:461:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  461 |   t_binary operator&(R_binary, x_binary) noexcept; // BIN_FUNC_6_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:462:22: error: declaration of ‘operator&’ as non-function
  462 |   t_binary operator&(x_binary, x_binary) noexcept; // BIN_FUNC_6_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:462:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  462 |   t_binary operator&(x_binary, x_binary) noexcept; // BIN_FUNC_6_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:462:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  462 |   t_binary operator&(x_binary, x_binary) noexcept; // BIN_FUNC_6_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:465:22: error: declaration of ‘operator&’ as non-function
  465 |   t_binary operator&(R_binary, T)        noexcept; // BIN_FUNC_6_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:465:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  465 |   t_binary operator&(R_binary, T)        noexcept; // BIN_FUNC_6_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:465:33: error: expected primary-expression before ‘)’ token
  465 |   t_binary operator&(R_binary, T)        noexcept; // BIN_FUNC_6_5_
      |                                 ^
../dainty_base_numeric.h:467:25: error: ‘R_binary’ has not been declared
  467 |   t_binary operator&(T, R_binary)        noexcept; // BIN_FUNC_6_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:469:22: error: declaration of ‘operator&’ as non-function
  469 |   t_binary operator&(x_binary, T)        noexcept; // BIN_FUNC_6_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:469:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  469 |   t_binary operator&(x_binary, T)        noexcept; // BIN_FUNC_6_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:469:33: error: expected primary-expression before ‘)’ token
  469 |   t_binary operator&(x_binary, T)        noexcept; // BIN_FUNC_6_7_
      |                                 ^
../dainty_base_numeric.h:471:25: error: ‘x_binary’ has not been declared
  471 |   t_binary operator&(T, x_binary)        noexcept; // BIN_FUNC_6_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:475:22: error: declaration of ‘operator^’ as non-function
  475 |   t_binary operator^(R_binary, R_binary) noexcept; // BIN_FUNC_7_1_
      |                      ^~~~~~~~
../dainty_base_numeric.h:475:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  475 |   t_binary operator^(R_binary, R_binary) noexcept; // BIN_FUNC_7_1_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:475:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  475 |   t_binary operator^(R_binary, R_binary) noexcept; // BIN_FUNC_7_1_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:476:22: error: declaration of ‘operator^’ as non-function
  476 |   t_binary operator^(x_binary, R_binary) noexcept; // BIN_FUNC_7_2_
      |                      ^~~~~~~~
../dainty_base_numeric.h:476:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  476 |   t_binary operator^(x_binary, R_binary) noexcept; // BIN_FUNC_7_2_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:476:32: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  476 |   t_binary operator^(x_binary, R_binary) noexcept; // BIN_FUNC_7_2_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:477:22: error: declaration of ‘operator^’ as non-function
  477 |   t_binary operator^(R_binary, x_binary) noexcept; // BIN_FUNC_7_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:477:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  477 |   t_binary operator^(R_binary, x_binary) noexcept; // BIN_FUNC_7_3_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:477:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  477 |   t_binary operator^(R_binary, x_binary) noexcept; // BIN_FUNC_7_3_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:478:22: error: declaration of ‘operator^’ as non-function
  478 |   t_binary operator^(x_binary, x_binary) noexcept; // BIN_FUNC_7_4_
      |                      ^~~~~~~~
../dainty_base_numeric.h:478:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  478 |   t_binary operator^(x_binary, x_binary) noexcept; // BIN_FUNC_7_4_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:478:32: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  478 |   t_binary operator^(x_binary, x_binary) noexcept; // BIN_FUNC_7_4_
      |                                ^~~~~~~~
      |                                t_binary
../dainty_base_numeric.h:481:22: error: declaration of ‘operator^’ as non-function
  481 |   t_binary operator^(R_binary, T)        noexcept; // BIN_FUNC_7_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:481:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  481 |   t_binary operator^(R_binary, T)        noexcept; // BIN_FUNC_7_5_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:481:33: error: expected primary-expression before ‘)’ token
  481 |   t_binary operator^(R_binary, T)        noexcept; // BIN_FUNC_7_5_
      |                                 ^
../dainty_base_numeric.h:483:25: error: ‘R_binary’ has not been declared
  483 |   t_binary operator^(T, R_binary)        noexcept; // BIN_FUNC_7_6_
      |                         ^~~~~~~~
../dainty_base_numeric.h:485:22: error: declaration of ‘operator^’ as non-function
  485 |   t_binary operator^(x_binary, T)        noexcept; // BIN_FUNC_7_7_
      |                      ^~~~~~~~
../dainty_base_numeric.h:485:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
  485 |   t_binary operator^(x_binary, T)        noexcept; // BIN_FUNC_7_7_
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:485:33: error: expected primary-expression before ‘)’ token
  485 |   t_binary operator^(x_binary, T)        noexcept; // BIN_FUNC_7_7_
      |                                 ^
../dainty_base_numeric.h:487:25: error: ‘x_binary’ has not been declared
  487 |   t_binary operator^(T, x_binary)        noexcept; // BIN_FUNC_7_8_
      |                         ^~~~~~~~
../dainty_base_numeric.h:496:21: error: declaration of ‘operator==’ as non-function
  496 |   t_bool operator==(R_binary, R_binary) noexcept; // BIN_FUNC_10_1_
      |                     ^~~~~~~~
../dainty_base_numeric.h:496:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  496 |   t_bool operator==(R_binary, R_binary) noexcept; // BIN_FUNC_10_1_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:496:31: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  496 |   t_bool operator==(R_binary, R_binary) noexcept; // BIN_FUNC_10_1_
      |                               ^~~~~~~~
      |                               t_binary
../dainty_base_numeric.h:499:21: error: declaration of ‘operator==’ as non-function
  499 |   t_bool operator==(R_binary, T)        noexcept; // BIN_FUNC_10_2_
      |                     ^~~~~~~~
../dainty_base_numeric.h:499:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  499 |   t_bool operator==(R_binary, T)        noexcept; // BIN_FUNC_10_2_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:499:32: error: expected primary-expression before ‘)’ token
  499 |   t_bool operator==(R_binary, T)        noexcept; // BIN_FUNC_10_2_
      |                                ^
../dainty_base_numeric.h:501:24: error: ‘R_binary’ has not been declared
  501 |   t_bool operator==(T, R_binary)        noexcept; // BIN_FUNC_10_3_
      |                        ^~~~~~~~
../dainty_base_numeric.h:505:21: error: declaration of ‘operator!=’ as non-function
  505 |   t_bool operator!=(R_binary, R_binary) noexcept; // BIN_FUNC_11_1_
      |                     ^~~~~~~~
../dainty_base_numeric.h:505:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  505 |   t_bool operator!=(R_binary, R_binary) noexcept; // BIN_FUNC_11_1_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:505:31: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  505 |   t_bool operator!=(R_binary, R_binary) noexcept; // BIN_FUNC_11_1_
      |                               ^~~~~~~~
      |                               t_binary
../dainty_base_numeric.h:508:21: error: declaration of ‘operator!=’ as non-function
  508 |   t_bool operator!=(R_binary, T)        noexcept; // BIN_FUNC_11_2_
      |                     ^~~~~~~~
../dainty_base_numeric.h:508:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  508 |   t_bool operator!=(R_binary, T)        noexcept; // BIN_FUNC_11_2_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:508:32: error: expected primary-expression before ‘)’ token
  508 |   t_bool operator!=(R_binary, T)        noexcept; // BIN_FUNC_11_2_
      |                                ^
../dainty_base_numeric.h:510:24: error: ‘R_binary’ has not been declared
  510 |   t_bool operator!=(T, R_binary)        noexcept; // BIN_FUNC_11_3_
      |                        ^~~~~~~~
../dainty_base_numeric.h:514:20: error: declaration of ‘operator<’ as non-function
  514 |   t_bool operator<(R_binary, R_binary) noexcept; // BIN_FUNC_12_1_
      |                    ^~~~~~~~
../dainty_base_numeric.h:514:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  514 |   t_bool operator<(R_binary, R_binary) noexcept; // BIN_FUNC_12_1_
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:514:30: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  514 |   t_bool operator<(R_binary, R_binary) noexcept; // BIN_FUNC_12_1_
      |                              ^~~~~~~~
      |                              t_binary
../dainty_base_numeric.h:517:20: error: declaration of ‘operator<’ as non-function
  517 |   t_bool operator<(R_binary, T)        noexcept; // BIN_FUNC_12_2_
      |                    ^~~~~~~~
../dainty_base_numeric.h:517:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  517 |   t_bool operator<(R_binary, T)        noexcept; // BIN_FUNC_12_2_
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:517:31: error: expected primary-expression before ‘)’ token
  517 |   t_bool operator<(R_binary, T)        noexcept; // BIN_FUNC_12_2_
      |                               ^
../dainty_base_numeric.h:519:23: error: ‘R_binary’ has not been declared
  519 |   t_bool operator<(T, R_binary)        noexcept; // BIN_FUNC_12_3_
      |                       ^~~~~~~~
../dainty_base_numeric.h:523:21: error: declaration of ‘operator<=’ as non-function
  523 |   t_bool operator<=(R_binary, R_binary) noexcept; // BIN_FUNC_13_1_
      |                     ^~~~~~~~
../dainty_base_numeric.h:523:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  523 |   t_bool operator<=(R_binary, R_binary) noexcept; // BIN_FUNC_13_1_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:523:31: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  523 |   t_bool operator<=(R_binary, R_binary) noexcept; // BIN_FUNC_13_1_
      |                               ^~~~~~~~
      |                               t_binary
../dainty_base_numeric.h:526:21: error: declaration of ‘operator<=’ as non-function
  526 |   t_bool operator<=(R_binary, T)        noexcept; // BIN_FUNC_13_2_
      |                     ^~~~~~~~
../dainty_base_numeric.h:526:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  526 |   t_bool operator<=(R_binary, T)        noexcept; // BIN_FUNC_13_2_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:526:32: error: expected primary-expression before ‘)’ token
  526 |   t_bool operator<=(R_binary, T)        noexcept; // BIN_FUNC_13_2_
      |                                ^
../dainty_base_numeric.h:528:24: error: ‘R_binary’ has not been declared
  528 |   t_bool operator<=(T, R_binary)        noexcept; // BIN_FUNC_13_3_
      |                        ^~~~~~~~
../dainty_base_numeric.h:532:20: error: declaration of ‘operator>’ as non-function
  532 |   t_bool operator>(R_binary, R_binary) noexcept; // BIN_FUNC_14_1_
      |                    ^~~~~~~~
../dainty_base_numeric.h:532:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  532 |   t_bool operator>(R_binary, R_binary) noexcept; // BIN_FUNC_14_1_
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:532:30: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  532 |   t_bool operator>(R_binary, R_binary) noexcept; // BIN_FUNC_14_1_
      |                              ^~~~~~~~
      |                              t_binary
../dainty_base_numeric.h:535:20: error: declaration of ‘operator>’ as non-function
  535 |   t_bool operator>(R_binary, T)        noexcept; // BIN_FUNC_14_2_
      |                    ^~~~~~~~
../dainty_base_numeric.h:535:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  535 |   t_bool operator>(R_binary, T)        noexcept; // BIN_FUNC_14_2_
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:535:31: error: expected primary-expression before ‘)’ token
  535 |   t_bool operator>(R_binary, T)        noexcept; // BIN_FUNC_14_2_
      |                               ^
../dainty_base_numeric.h:537:23: error: ‘R_binary’ has not been declared
  537 |   t_bool operator>(T, R_binary)        noexcept; // BIN_FUNC_14_3_
      |                       ^~~~~~~~
../dainty_base_numeric.h:541:21: error: declaration of ‘operator>=’ as non-function
  541 |   t_bool operator>=(R_binary, R_binary) noexcept; // BIN_FUNC_15_1_
      |                     ^~~~~~~~
../dainty_base_numeric.h:541:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  541 |   t_bool operator>=(R_binary, R_binary) noexcept; // BIN_FUNC_15_1_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:541:31: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  541 |   t_bool operator>=(R_binary, R_binary) noexcept; // BIN_FUNC_15_1_
      |                               ^~~~~~~~
      |                               t_binary
../dainty_base_numeric.h:544:21: error: declaration of ‘operator>=’ as non-function
  544 |   t_bool operator>=(R_binary, T)        noexcept; // BIN_FUNC_15_2_
      |                     ^~~~~~~~
../dainty_base_numeric.h:544:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
  544 |   t_bool operator>=(R_binary, T)        noexcept; // BIN_FUNC_15_2_
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:544:32: error: expected primary-expression before ‘)’ token
  544 |   t_bool operator>=(R_binary, T)        noexcept; // BIN_FUNC_15_2_
      |                                ^
../dainty_base_numeric.h:546:24: error: ‘R_binary’ has not been declared
  546 |   t_bool operator>=(T, R_binary)        noexcept; // BIN_FUNC_15_3_
      |                        ^~~~~~~~
../dainty_base_numeric.h:550:23: error: declaration of ‘operator+’ as non-function
  550 |   t_integer operator+(R_integer, R_integer) noexcept; // INT_FUNC_1_1_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:550:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  550 |   t_integer operator+(R_integer, R_integer) noexcept; // INT_FUNC_1_1_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:550:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  550 |   t_integer operator+(R_integer, R_integer) noexcept; // INT_FUNC_1_1_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:551:23: error: declaration of ‘operator+’ as non-function
  551 |   t_integer operator+(x_integer, R_integer) noexcept; // INT_FUNC_1_2_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:551:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  551 |   t_integer operator+(x_integer, R_integer) noexcept; // INT_FUNC_1_2_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:551:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  551 |   t_integer operator+(x_integer, R_integer) noexcept; // INT_FUNC_1_2_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:552:23: error: declaration of ‘operator+’ as non-function
  552 |   t_integer operator+(R_integer, x_integer) noexcept; // INT_FUNC_1_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:552:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  552 |   t_integer operator+(R_integer, x_integer) noexcept; // INT_FUNC_1_3_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:552:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  552 |   t_integer operator+(R_integer, x_integer) noexcept; // INT_FUNC_1_3_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:553:23: error: declaration of ‘operator+’ as non-function
  553 |   t_integer operator+(x_integer, x_integer) noexcept; // INT_FUNC_1_4_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:553:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  553 |   t_integer operator+(x_integer, x_integer) noexcept; // INT_FUNC_1_4_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:553:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  553 |   t_integer operator+(x_integer, x_integer) noexcept; // INT_FUNC_1_4_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:556:23: error: declaration of ‘operator+’ as non-function
  556 |   t_integer operator+(R_integer, T)         noexcept; // INT_FUNC_1_5_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:556:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  556 |   t_integer operator+(R_integer, T)         noexcept; // INT_FUNC_1_5_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:556:35: error: expected primary-expression before ‘)’ token
  556 |   t_integer operator+(R_integer, T)         noexcept; // INT_FUNC_1_5_
      |                                   ^
../dainty_base_numeric.h:558:26: error: ‘R_integer’ has not been declared
  558 |   t_integer operator+(T, R_integer)         noexcept; // INT_FUNC_1_6_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:560:23: error: declaration of ‘operator+’ as non-function
  560 |   t_integer operator+(x_integer, T)         noexcept; // INT_FUNC_1_7_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:560:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  560 |   t_integer operator+(x_integer, T)         noexcept; // INT_FUNC_1_7_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:560:35: error: expected primary-expression before ‘)’ token
  560 |   t_integer operator+(x_integer, T)         noexcept; // INT_FUNC_1_7_
      |                                   ^
../dainty_base_numeric.h:562:26: error: ‘x_integer’ has not been declared
  562 |   t_integer operator+(T, x_integer)         noexcept; // INT_FUNC_1_8_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:566:23: error: declaration of ‘operator-’ as non-function
  566 |   t_integer operator-(R_integer, R_integer) noexcept; // INT_FUNC_2_1_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:566:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  566 |   t_integer operator-(R_integer, R_integer) noexcept; // INT_FUNC_2_1_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:566:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  566 |   t_integer operator-(R_integer, R_integer) noexcept; // INT_FUNC_2_1_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:567:23: error: declaration of ‘operator-’ as non-function
  567 |   t_integer operator-(x_integer, R_integer) noexcept; // INT_FUNC_2_2_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:567:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  567 |   t_integer operator-(x_integer, R_integer) noexcept; // INT_FUNC_2_2_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:567:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  567 |   t_integer operator-(x_integer, R_integer) noexcept; // INT_FUNC_2_2_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:568:23: error: declaration of ‘operator-’ as non-function
  568 |   t_integer operator-(R_integer, x_integer) noexcept; // INT_FUNC_2_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:568:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  568 |   t_integer operator-(R_integer, x_integer) noexcept; // INT_FUNC_2_3_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:568:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  568 |   t_integer operator-(R_integer, x_integer) noexcept; // INT_FUNC_2_3_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:569:23: error: declaration of ‘operator-’ as non-function
  569 |   t_integer operator-(x_integer, x_integer) noexcept; // INT_FUNC_2_4_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:569:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  569 |   t_integer operator-(x_integer, x_integer) noexcept; // INT_FUNC_2_4_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:569:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  569 |   t_integer operator-(x_integer, x_integer) noexcept; // INT_FUNC_2_4_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:572:23: error: declaration of ‘operator-’ as non-function
  572 |   t_integer operator-(R_integer, T)         noexcept; // INT_FUNC_2_5_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:572:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  572 |   t_integer operator-(R_integer, T)         noexcept; // INT_FUNC_2_5_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:572:35: error: expected primary-expression before ‘)’ token
  572 |   t_integer operator-(R_integer, T)         noexcept; // INT_FUNC_2_5_
      |                                   ^
../dainty_base_numeric.h:574:26: error: ‘R_integer’ has not been declared
  574 |   t_integer operator-(T, R_integer)         noexcept; // INT_FUNC_2_6_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:576:23: error: declaration of ‘operator-’ as non-function
  576 |   t_integer operator-(x_integer, T)         noexcept; // INT_FUNC_2_7_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:576:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  576 |   t_integer operator-(x_integer, T)         noexcept; // INT_FUNC_2_7_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:576:35: error: expected primary-expression before ‘)’ token
  576 |   t_integer operator-(x_integer, T)         noexcept; // INT_FUNC_2_7_
      |                                   ^
../dainty_base_numeric.h:578:26: error: ‘x_integer’ has not been declared
  578 |   t_integer operator-(T, x_integer)         noexcept; // INT_FUNC_2_8_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:582:23: error: declaration of ‘operator*’ as non-function
  582 |   t_integer operator*(R_integer, R_integer) noexcept; // INT_FUNC_3_1_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:582:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  582 |   t_integer operator*(R_integer, R_integer) noexcept; // INT_FUNC_3_1_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:582:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  582 |   t_integer operator*(R_integer, R_integer) noexcept; // INT_FUNC_3_1_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:583:23: error: declaration of ‘operator*’ as non-function
  583 |   t_integer operator*(x_integer, R_integer) noexcept; // INT_FUNC_3_2_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:583:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  583 |   t_integer operator*(x_integer, R_integer) noexcept; // INT_FUNC_3_2_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:583:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  583 |   t_integer operator*(x_integer, R_integer) noexcept; // INT_FUNC_3_2_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:584:23: error: declaration of ‘operator*’ as non-function
  584 |   t_integer operator*(R_integer, x_integer) noexcept; // INT_FUNC_3_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:584:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  584 |   t_integer operator*(R_integer, x_integer) noexcept; // INT_FUNC_3_3_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:584:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  584 |   t_integer operator*(R_integer, x_integer) noexcept; // INT_FUNC_3_3_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:585:23: error: declaration of ‘operator*’ as non-function
  585 |   t_integer operator*(x_integer, x_integer) noexcept; // INT_FUNC_3_4_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:585:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  585 |   t_integer operator*(x_integer, x_integer) noexcept; // INT_FUNC_3_4_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:585:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  585 |   t_integer operator*(x_integer, x_integer) noexcept; // INT_FUNC_3_4_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:588:23: error: declaration of ‘operator*’ as non-function
  588 |   t_integer operator*(R_integer, T)         noexcept; // INT_FUNC_3_5_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:588:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  588 |   t_integer operator*(R_integer, T)         noexcept; // INT_FUNC_3_5_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:588:35: error: expected primary-expression before ‘)’ token
  588 |   t_integer operator*(R_integer, T)         noexcept; // INT_FUNC_3_5_
      |                                   ^
../dainty_base_numeric.h:590:26: error: ‘R_integer’ has not been declared
  590 |   t_integer operator*(T, R_integer)         noexcept; // INT_FUNC_3_6_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:592:23: error: declaration of ‘operator*’ as non-function
  592 |   t_integer operator*(x_integer, T)         noexcept; // INT_FUNC_3_7_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:592:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  592 |   t_integer operator*(x_integer, T)         noexcept; // INT_FUNC_3_7_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:592:35: error: expected primary-expression before ‘)’ token
  592 |   t_integer operator*(x_integer, T)         noexcept; // INT_FUNC_3_7_
      |                                   ^
../dainty_base_numeric.h:594:26: error: ‘x_integer’ has not been declared
  594 |   t_integer operator*(T, x_integer)         noexcept; // INT_FUNC_3_8_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:598:23: error: declaration of ‘operator/’ as non-function
  598 |   t_integer operator/(R_integer, R_integer) noexcept; // INT_FUNC_4_1_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:598:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  598 |   t_integer operator/(R_integer, R_integer) noexcept; // INT_FUNC_4_1_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:598:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  598 |   t_integer operator/(R_integer, R_integer) noexcept; // INT_FUNC_4_1_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:599:23: error: declaration of ‘operator/’ as non-function
  599 |   t_integer operator/(x_integer, R_integer) noexcept; // INT_FUNC_4_2_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:599:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  599 |   t_integer operator/(x_integer, R_integer) noexcept; // INT_FUNC_4_2_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:599:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  599 |   t_integer operator/(x_integer, R_integer) noexcept; // INT_FUNC_4_2_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:600:23: error: declaration of ‘operator/’ as non-function
  600 |   t_integer operator/(R_integer, x_integer) noexcept; // INT_FUNC_4_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:600:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  600 |   t_integer operator/(R_integer, x_integer) noexcept; // INT_FUNC_4_3_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:600:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  600 |   t_integer operator/(R_integer, x_integer) noexcept; // INT_FUNC_4_3_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:601:23: error: declaration of ‘operator/’ as non-function
  601 |   t_integer operator/(x_integer, x_integer) noexcept; // INT_FUNC_4_4_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:601:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  601 |   t_integer operator/(x_integer, x_integer) noexcept; // INT_FUNC_4_4_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:601:34: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  601 |   t_integer operator/(x_integer, x_integer) noexcept; // INT_FUNC_4_4_
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:604:23: error: declaration of ‘operator/’ as non-function
  604 |   t_integer operator/(R_integer, T)         noexcept; // INT_FUNC_4_5_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:604:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  604 |   t_integer operator/(R_integer, T)         noexcept; // INT_FUNC_4_5_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:604:35: error: expected primary-expression before ‘)’ token
  604 |   t_integer operator/(R_integer, T)         noexcept; // INT_FUNC_4_5_
      |                                   ^
../dainty_base_numeric.h:606:26: error: ‘R_integer’ has not been declared
  606 |   t_integer operator/(T, R_integer)         noexcept; // INT_FUNC_4_6_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:608:23: error: declaration of ‘operator/’ as non-function
  608 |   t_integer operator/(x_integer, T)         noexcept; // INT_FUNC_4_7_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:608:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
  608 |   t_integer operator/(x_integer, T)         noexcept; // INT_FUNC_4_7_
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:608:35: error: expected primary-expression before ‘)’ token
  608 |   t_integer operator/(x_integer, T)         noexcept; // INT_FUNC_4_7_
      |                                   ^
../dainty_base_numeric.h:610:26: error: ‘x_integer’ has not been declared
  610 |   t_integer operator/(T, x_integer)         noexcept; // INT_FUNC_4_8_
      |                          ^~~~~~~~~
../dainty_base_numeric.h:614:21: error: declaration of ‘operator==’ as non-function
  614 |   t_bool operator==(R_integer, R_integer) noexcept; // INT_FUNC_5_1_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:614:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  614 |   t_bool operator==(R_integer, R_integer) noexcept; // INT_FUNC_5_1_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:614:32: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  614 |   t_bool operator==(R_integer, R_integer) noexcept; // INT_FUNC_5_1_
      |                                ^~~~~~~~~
      |                                t_integer
../dainty_base_numeric.h:617:21: error: declaration of ‘operator==’ as non-function
  617 |   t_bool operator==(R_integer, T)         noexcept; // INT_FUNC_5_2_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:617:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  617 |   t_bool operator==(R_integer, T)         noexcept; // INT_FUNC_5_2_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:617:33: error: expected primary-expression before ‘)’ token
  617 |   t_bool operator==(R_integer, T)         noexcept; // INT_FUNC_5_2_
      |                                 ^
../dainty_base_numeric.h:619:24: error: ‘R_integer’ has not been declared
  619 |   t_bool operator==(T, R_integer)         noexcept; // INT_FUNC_5_3_
      |                        ^~~~~~~~~
../dainty_base_numeric.h:623:21: error: declaration of ‘operator!=’ as non-function
  623 |   t_bool operator!=(R_integer, R_integer) noexcept; // INT_FUNC_6_1_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:623:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  623 |   t_bool operator!=(R_integer, R_integer) noexcept; // INT_FUNC_6_1_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:623:32: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  623 |   t_bool operator!=(R_integer, R_integer) noexcept; // INT_FUNC_6_1_
      |                                ^~~~~~~~~
      |                                t_integer
../dainty_base_numeric.h:626:21: error: declaration of ‘operator!=’ as non-function
  626 |   t_bool operator!=(R_integer, T)         noexcept; // INT_FUNC_6_2_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:626:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  626 |   t_bool operator!=(R_integer, T)         noexcept; // INT_FUNC_6_2_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:626:33: error: expected primary-expression before ‘)’ token
  626 |   t_bool operator!=(R_integer, T)         noexcept; // INT_FUNC_6_2_
      |                                 ^
../dainty_base_numeric.h:628:24: error: ‘R_integer’ has not been declared
  628 |   t_bool operator!=(T, R_integer)         noexcept; // INT_FUNC_6_3_
      |                        ^~~~~~~~~
../dainty_base_numeric.h:632:20: error: declaration of ‘operator<’ as non-function
  632 |   t_bool operator<(R_integer, R_integer) noexcept; // INT_FUNC_7_1_
      |                    ^~~~~~~~~
../dainty_base_numeric.h:632:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  632 |   t_bool operator<(R_integer, R_integer) noexcept; // INT_FUNC_7_1_
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:632:31: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  632 |   t_bool operator<(R_integer, R_integer) noexcept; // INT_FUNC_7_1_
      |                               ^~~~~~~~~
      |                               t_integer
../dainty_base_numeric.h:635:20: error: declaration of ‘operator<’ as non-function
  635 |   t_bool operator<(R_integer, T)         noexcept; // INT_FUNC_7_2_
      |                    ^~~~~~~~~
../dainty_base_numeric.h:635:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  635 |   t_bool operator<(R_integer, T)         noexcept; // INT_FUNC_7_2_
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:635:32: error: expected primary-expression before ‘)’ token
  635 |   t_bool operator<(R_integer, T)         noexcept; // INT_FUNC_7_2_
      |                                ^
../dainty_base_numeric.h:637:23: error: ‘R_integer’ has not been declared
  637 |   t_bool operator<(T, R_integer)         noexcept; // INT_FUNC_7_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:641:21: error: declaration of ‘operator<=’ as non-function
  641 |   t_bool operator<=(R_integer, R_integer) noexcept; // INT_FUNC_8_1_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:641:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  641 |   t_bool operator<=(R_integer, R_integer) noexcept; // INT_FUNC_8_1_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:641:32: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  641 |   t_bool operator<=(R_integer, R_integer) noexcept; // INT_FUNC_8_1_
      |                                ^~~~~~~~~
      |                                t_integer
../dainty_base_numeric.h:644:21: error: declaration of ‘operator<=’ as non-function
  644 |   t_bool operator<=(R_integer, T)         noexcept; // INT_FUNC_8_2_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:644:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  644 |   t_bool operator<=(R_integer, T)         noexcept; // INT_FUNC_8_2_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:644:33: error: expected primary-expression before ‘)’ token
  644 |   t_bool operator<=(R_integer, T)         noexcept; // INT_FUNC_8_2_
      |                                 ^
../dainty_base_numeric.h:646:24: error: ‘R_integer’ has not been declared
  646 |   t_bool operator<=(T, R_integer)         noexcept; // INT_FUNC_8_3_
      |                        ^~~~~~~~~
../dainty_base_numeric.h:650:20: error: declaration of ‘operator>’ as non-function
  650 |   t_bool operator>(R_integer, R_integer) noexcept; // INT_FUNC_9_1_
      |                    ^~~~~~~~~
../dainty_base_numeric.h:650:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  650 |   t_bool operator>(R_integer, R_integer) noexcept; // INT_FUNC_9_1_
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:650:31: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  650 |   t_bool operator>(R_integer, R_integer) noexcept; // INT_FUNC_9_1_
      |                               ^~~~~~~~~
      |                               t_integer
../dainty_base_numeric.h:653:20: error: declaration of ‘operator>’ as non-function
  653 |   t_bool operator>(R_integer, T)         noexcept; // INT_FUNC_9_2_
      |                    ^~~~~~~~~
../dainty_base_numeric.h:653:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  653 |   t_bool operator>(R_integer, T)         noexcept; // INT_FUNC_9_2_
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:653:32: error: expected primary-expression before ‘)’ token
  653 |   t_bool operator>(R_integer, T)         noexcept; // INT_FUNC_9_2_
      |                                ^
../dainty_base_numeric.h:655:23: error: ‘R_integer’ has not been declared
  655 |   t_bool operator>(T, R_integer)         noexcept; // INT_FUNC_9_3_
      |                       ^~~~~~~~~
../dainty_base_numeric.h:659:21: error: declaration of ‘operator>=’ as non-function
  659 |   t_bool operator>=(R_integer, R_integer) noexcept; // INT_FUNC_10_1_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:659:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  659 |   t_bool operator>=(R_integer, R_integer) noexcept; // INT_FUNC_10_1_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:659:32: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  659 |   t_bool operator>=(R_integer, R_integer) noexcept; // INT_FUNC_10_1_
      |                                ^~~~~~~~~
      |                                t_integer
../dainty_base_numeric.h:662:21: error: declaration of ‘operator>=’ as non-function
  662 |   t_bool operator>=(R_integer, T)         noexcept; // INT_FUNC_10_2_
      |                     ^~~~~~~~~
../dainty_base_numeric.h:662:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
  662 |   t_bool operator>=(R_integer, T)         noexcept; // INT_FUNC_10_2_
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:662:33: error: expected primary-expression before ‘)’ token
  662 |   t_bool operator>=(R_integer, T)         noexcept; // INT_FUNC_10_2_
      |                                 ^
../dainty_base_numeric.h:664:24: error: ‘R_integer’ has not been declared
  664 |   t_bool operator>=(T, R_integer)         noexcept; // INT_FUNC_10_3_
      |                        ^~~~~~~~~
../dainty_base_numeric.h:682:22: error: ISO C++ forbids declaration of ‘t_binary’ with no type [-fpermissive]
  682 |   t_binary::t_binary(R_binary value) noexcept : store_{value.store_} {
      |                      ^~~~~~~~
../dainty_base_numeric.h:681:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
  681 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:682:3: error: ‘int dainty::base::numeric::t_binary::t_binary’ is not a static data member of ‘class dainty::base::numeric::t_binary’
  682 |   t_binary::t_binary(R_binary value) noexcept : store_{value.store_} {
      |   ^~~~~~~~
../dainty_base_numeric.h:682:22: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::R_binary’
  682 |   t_binary::t_binary(R_binary value) noexcept : store_{value.store_} {
      |                      ^~~~~~~~
../dainty_base_numeric.h:66:22: note: declared here
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:682:70: error: expected unqualified-id before ‘{’ token
  682 |   t_binary::t_binary(R_binary value) noexcept : store_{value.store_} {
      |                                                                      ^
../dainty_base_numeric.h:687:34: error: ‘R_binary’ is not a type
  687 |   t_binary::t_binary(t_bits max, R_binary value) noexcept
      |                                  ^~~~~~~~
../dainty_base_numeric.h: In constructor ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’:
../dainty_base_numeric.h:688:14: error: ‘max_of’ was not declared in this scope
  688 |     : store_{max_of<impl_::t_n>(impl_::calc_size_(max), value.store_.size)},
      |              ^~~~~~
../dainty_base_numeric.h:688:14: note: suggested alternatives:
In file included from ../../util/dainty_base_util.h:32,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../specific/dainty_base_specific.h:602:22: note:   ‘dainty::base::specific::max_of’
  602 |   t_specific<T, TAG> max_of(t_specific<T, TAG> value, Ts... values) noexcept {
      |                      ^~~~~~
In file included from ../../util/dainty_base_util.h:33,
                 from ../dainty_base_numeric.h:30,
                 from dainty_base_numeric_test1.cpp:4:
../../logical/dainty_base_logical.h:1546:8: note:   ‘dainty::base::logical::max_of’
 1546 |   auto max_of(L1 l, Ls... ls) noexcept -> L {
      |        ^~~~~~
../../logical/dainty_base_logical.h:1546:8: note:   ‘dainty::base::logical::max_of’
In file included from dainty_base_numeric_test1.cpp:4:
../dainty_base_numeric.h:688:31: error: expected primary-expression before ‘>’ token
  688 |     : store_{max_of<impl_::t_n>(impl_::calc_size_(max), value.store_.size)},
      |                               ^
../dainty_base_numeric.h:688:63: error: request for member ‘store_’ in ‘value’, which is of non-class type ‘int’
  688 |     : store_{max_of<impl_::t_n>(impl_::calc_size_(max), value.store_.size)},
      |                                                               ^~~~~~
../dainty_base_numeric.h:689:27: error: request for member ‘store_’ in ‘value’, which is of non-class type ‘int’
  689 |       impl_{store_, value.store_} {
      |                           ^~~~~~
../dainty_base_numeric.h:689:33: error: no matching function for call to ‘dainty::base::numeric::impl_::t_buf_::t_buf_(<brace-enclosed initializer list>)’
  689 |       impl_{store_, value.store_} {
      |                                 ^
In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h:192:5: note: candidate: ‘dainty::base::numeric::impl_::t_buf_::t_buf_(dainty::base::logical::t_n, dainty::base::numeric::impl_::x_buf_)’
  192 |     t_buf_(t_n, x_buf_) noexcept;
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:192:5: note:   candidate expects 2 arguments, 1 provided
../impl_/dainty_base_numeric_impl.h:191:5: note: candidate: ‘dainty::base::numeric::impl_::t_buf_::t_buf_(dainty::base::numeric::impl_::x_buf_)’
  191 |     t_buf_(     x_buf_) noexcept;
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:191:5: note:   conversion of argument 1 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:190:5: note: candidate: ‘dainty::base::numeric::impl_::t_buf_::t_buf_(dainty::base::logical::t_n, dainty::base::numeric::impl_::R_buf_)’
  190 |     t_buf_(t_n, R_buf_) noexcept;
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:190:5: note:   candidate expects 2 arguments, 1 provided
../impl_/dainty_base_numeric_impl.h:189:5: note: candidate: ‘dainty::base::numeric::impl_::t_buf_::t_buf_(dainty::base::numeric::impl_::R_buf_)’
  189 |     t_buf_(     R_buf_) noexcept;
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:189:5: note:   conversion of argument 1 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:188:5: note: candidate: ‘dainty::base::numeric::impl_::t_buf_::t_buf_(dainty::base::logical::t_n)’
  188 |     t_buf_(t_n)         noexcept;
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:188:5: note:   conversion of argument 1 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:185:5: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_buf_::t_buf_()’
  185 |     t_buf_() noexcept {
      |     ^~~~~~
../impl_/dainty_base_numeric_impl.h:185:5: note:   candidate expects 0 arguments, 1 provided
In file included from dainty_base_numeric_test1.cpp:4:
../dainty_base_numeric.h:689:33: error: no matching function for call to ‘dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(<brace-enclosed initializer list>)’
  689 |       impl_{store_, value.store_} {
      |                                 ^
In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h:790:3: note: candidate: ‘dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(dainty::base::numeric::impl_::r_store_, dainty::base::numeric::impl_::R_store_)’
  790 |   t_impl_base_::t_impl_base_(r_store_ store, R_store_ value) noexcept {
      |   ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:790:3: note:   conversion of argument 2 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:784:3: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(dainty::base::numeric::impl_::r_store_, dainty::base::numeric::impl_::t_pvalue_)’
  784 |   t_impl_base_::t_impl_base_(r_store_ store, t_pvalue_ value) noexcept {
      |   ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:784:3: note:   conversion of argument 2 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:778:3: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(dainty::base::numeric::impl_::r_store_, dainty::base::numeric::impl_::t_nvalue_)’
  778 |   t_impl_base_::t_impl_base_(r_store_ store, t_nvalue_ value) noexcept {
      |   ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:778:3: note:   conversion of argument 2 would be ill-formed:
../impl_/dainty_base_numeric_impl.h:773:3: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(dainty::base::numeric::impl_::r_store_)’
  773 |   t_impl_base_::t_impl_base_(r_store_) noexcept {
      |   ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:773:3: note:   candidate expects 1 argument, 2 provided
../impl_/dainty_base_numeric_impl.h:768:3: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_()’
  768 |   t_impl_base_::t_impl_base_() noexcept {
      |   ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:768:3: note:   candidate expects 0 arguments, 2 provided
../impl_/dainty_base_numeric_impl.h:319:9: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(const dainty::base::numeric::impl_::t_impl_base_&)’
  319 |   class t_impl_base_ {
      |         ^~~~~~~~~~~~
../impl_/dainty_base_numeric_impl.h:319:9: note:   candidate expects 1 argument, 2 provided
../impl_/dainty_base_numeric_impl.h:319:9: note: candidate: ‘constexpr dainty::base::numeric::impl_::t_impl_base_::t_impl_base_(dainty::base::numeric::impl_::t_impl_base_&&)’
../impl_/dainty_base_numeric_impl.h:319:9: note:   candidate expects 1 argument, 2 provided
In file included from dainty_base_numeric_test1.cpp:4:
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:694:22: error: ISO C++ forbids declaration of ‘t_binary’ with no type [-fpermissive]
  694 |   t_binary::t_binary(x_binary value) noexcept
      |                      ^~~~~~~~
../dainty_base_numeric.h:693:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
  693 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:694:3: error: ‘int dainty::base::numeric::t_binary::t_binary’ is not a static data member of ‘class dainty::base::numeric::t_binary’
  694 |   t_binary::t_binary(x_binary value) noexcept
      |   ^~~~~~~~
../dainty_base_numeric.h:694:22: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::x_binary’
  694 |   t_binary::t_binary(x_binary value) noexcept
      |                      ^~~~~~~~
../dainty_base_numeric.h:68:22: note: declared here
   68 |     t_binary(        x_binary) noexcept; // BIN_METHOD_1_5_
      |                      ^~~~~~~~
../dainty_base_numeric.h:695:42: error: expected unqualified-id before ‘{’ token
  695 |     : store_{util::x_cast(value.store_)} {
      |                                          ^
../dainty_base_numeric.h:700:34: error: ‘x_binary’ is not a type
  700 |   t_binary::t_binary(t_bits max, x_binary value) noexcept
      |                                  ^~~~~~~~
../dainty_base_numeric.h:700:3: error: redefinition of ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’
  700 |   t_binary::t_binary(t_bits max, x_binary value) noexcept
      |   ^~~~~~~~
../dainty_base_numeric.h:687:3: note: ‘dainty::base::numeric::t_binary::t_binary(dainty::base::numeric::impl_::t_bits, int)’ previously defined here
  687 |   t_binary::t_binary(t_bits max, R_binary value) noexcept
      |   ^~~~~~~~
../dainty_base_numeric.h:701:65: error: mixing declarations and function-definitions is forbidden
  701 |     : store_{impl_::calc_size_(max), util::x_cast(value.store_)},
      |                                                                 ^
../dainty_base_numeric.h:702:7: error: ISO C++ forbids declaration of ‘impl_’ with no type [-fpermissive]
  702 |       impl_{store_, value.store_} {
      |       ^~~~~
../dainty_base_numeric.h:699:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
  699 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:702:7: error: ‘int dainty::base::numeric::impl_’ redeclared as different kind of entity
  702 |       impl_{store_, value.store_} {
      |       ^~~~~
In file included from ../dainty_base_numeric.h:31,
                 from dainty_base_numeric_test1.cpp:4:
../impl_/dainty_base_numeric_impl.h:44:11: note: previous declaration ‘namespace dainty::base::numeric::impl_ { }’
   44 | namespace impl_
      |           ^~~~~
In file included from dainty_base_numeric_test1.cpp:4:
../dainty_base_numeric.h:702:13: error: ‘store_’ was not declared in this scope
  702 |       impl_{store_, value.store_} {
      |             ^~~~~~
../dainty_base_numeric.h:702:21: error: ‘value’ was not declared in this scope
  702 |       impl_{store_, value.store_} {
      |                     ^~~~~
../dainty_base_numeric.h:739:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  739 |   r_binary t_binary::operator=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:749:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  749 |   r_binary t_binary::operator=(x_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:760:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  760 |   r_binary t_binary::operator=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:768:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  768 |   r_binary t_binary::operator=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:777:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  777 |   r_binary t_binary::operator+=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:785:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  785 |   r_binary t_binary::operator+=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:793:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  793 |   r_binary t_binary::operator+=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:802:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  802 |   r_binary t_binary::operator-=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:810:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  810 |   r_binary t_binary::operator-=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:818:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  818 |   r_binary t_binary::operator-=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:827:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  827 |   r_binary t_binary::operator*=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:835:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  835 |   r_binary t_binary::operator*=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:843:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  843 |   r_binary t_binary::operator*=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:852:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  852 |   r_binary t_binary::operator/=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:860:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  860 |   r_binary t_binary::operator/=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:868:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  868 |   r_binary t_binary::operator/=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:877:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  877 |   r_binary t_binary::operator&=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:885:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  885 |   r_binary t_binary::operator&=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:893:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  893 |   r_binary t_binary::operator&=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:902:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  902 |   r_binary t_binary::operator|=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:910:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  910 |   r_binary t_binary::operator|=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:918:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  918 |   r_binary t_binary::operator|=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:927:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  927 |   r_binary t_binary::operator^=(R_binary value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:935:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  935 |   r_binary t_binary::operator^=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:943:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  943 |   r_binary t_binary::operator^=(T value) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h: In member function ‘dainty::base::numeric::t_binary dainty::base::numeric::t_binary::operator-() const’:
../dainty_base_numeric.h:954:9: error: ‘class dainty::base::numeric::t_binary’ has no member named ‘twos_complement’
  954 |     tmp.twos_complement();
      |         ^~~~~~~~~~~~~~~
../dainty_base_numeric.h: In member function ‘dainty::base::numeric::t_binary dainty::base::numeric::t_binary::operator~() const’:
../dainty_base_numeric.h:962:9: error: ‘class dainty::base::numeric::t_binary’ has no member named ‘ones_complement’
  962 |     tmp.ones_complement();
      |         ^~~~~~~~~~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:968:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  968 |   r_binary t_binary::operator>>=(t_bits n) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:975:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  975 |   r_binary t_binary::operator<<=(t_bits n) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:982:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  982 |   r_binary t_binary::ones_complement() noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:989:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  989 |   r_binary t_binary::twos_complement() noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:996:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
  996 |   r_binary t_binary::shift_left(t_bits n) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:1003:3: error: ‘r_binary’ does not name a type; did you mean ‘t_binary’?
 1003 |   r_binary t_binary::shift_right(t_bits n) noexcept {
      |   ^~~~~~~~
      |   t_binary
../dainty_base_numeric.h:1101:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1101 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1102:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_binary::reset’ is not a static data member of ‘class dainty::base::numeric::t_binary’
 1102 |   t_bool t_binary::reset(R_binary value) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:1102:26: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::R_binary’
 1102 |   t_bool t_binary::reset(R_binary value) noexcept {
      |                          ^~~~~~~~
../dainty_base_numeric.h:66:22: note: declared here
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:1108:38: error: ‘R_binary’ is not a type
 1108 |   t_bool t_binary::reset(t_bits max, R_binary value) noexcept {
      |                                      ^~~~~~~~
../dainty_base_numeric.h: In member function ‘dainty::base::types::t_bool dainty::base::numeric::t_binary::reset(dainty::base::numeric::impl_::t_bits, int)’:
../dainty_base_numeric.h:1109:55: error: request for member ‘store_’ in ‘value’, which is of non-class type ‘int’
 1109 |     return store_.reset(impl_::calc_size_(max), value.store_);
      |                                                       ^~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1143:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1143 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1144:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_binary::is_equal’ is not a static data member of ‘class dainty::base::numeric::t_binary’
 1144 |   t_bool t_binary::is_equal(R_binary value) const noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:1144:29: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::R_binary’
 1144 |   t_bool t_binary::is_equal(R_binary value) const noexcept {
      |                             ^~~~~~~~
../dainty_base_numeric.h:66:22: note: declared here
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:1165:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1165 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1166:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_binary::is_less’ is not a static data member of ‘class dainty::base::numeric::t_binary’
 1166 |   t_bool t_binary::is_less(R_binary value) const noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:1166:28: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::R_binary’
 1166 |   t_bool t_binary::is_less(R_binary value) const noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:66:22: note: declared here
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:1187:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1187 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1188:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_binary::is_less_equal’ is not a static data member of ‘class dainty::base::numeric::t_binary’
 1188 |   t_bool t_binary::is_less_equal(R_binary value) const noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:1188:34: error: invalid use of non-static data member ‘dainty::base::numeric::t_binary::R_binary’
 1188 |   t_bool t_binary::is_less_equal(R_binary value) const noexcept {
      |                                  ^~~~~~~~
../dainty_base_numeric.h:66:22: note: declared here
   66 |     t_binary(        R_binary) noexcept; // BIN_METHOD_1_3_
      |                      ^~~~~~~~
../dainty_base_numeric.h:1221:24: error: ISO C++ forbids declaration of ‘t_integer’ with no type [-fpermissive]
 1221 |   t_integer::t_integer(R_integer value) noexcept : bin_{value} {
      |                        ^~~~~~~~~
../dainty_base_numeric.h:1220:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1220 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1221:3: error: ‘int dainty::base::numeric::t_integer::t_integer’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1221 |   t_integer::t_integer(R_integer value) noexcept : bin_{value} {
      |   ^~~~~~~~~
../dainty_base_numeric.h:1221:24: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_integer’
 1221 |   t_integer::t_integer(R_integer value) noexcept : bin_{value} {
      |                        ^~~~~~~~~
../dainty_base_numeric.h:251:25: note: declared here
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1221:64: error: expected unqualified-id before ‘{’ token
 1221 |   t_integer::t_integer(R_integer value) noexcept : bin_{value} {
      |                                                                ^
../dainty_base_numeric.h:1226:38: error: ‘R_integer’ is not a type
 1226 |   t_integer::t_integer(t_digits max, R_integer value) noexcept
      |                                      ^~~~~~~~~
../dainty_base_numeric.h:1232:24: error: ISO C++ forbids declaration of ‘t_integer’ with no type [-fpermissive]
 1232 |   t_integer::t_integer(x_integer value) noexcept
      |                        ^~~~~~~~~
../dainty_base_numeric.h:1231:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1231 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1232:3: error: ‘int dainty::base::numeric::t_integer::t_integer’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1232 |   t_integer::t_integer(x_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1232:24: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::x_integer’
 1232 |   t_integer::t_integer(x_integer value) noexcept
      |                        ^~~~~~~~~
../dainty_base_numeric.h:253:25: note: declared here
  253 |     t_integer(          x_integer) noexcept; // INT_METHOD_1_5_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1233:56: error: expected unqualified-id before ‘{’ token
 1233 |     : bin_{static_cast<x_binary>(util::x_cast(value))} {
      |                                                        ^
../dainty_base_numeric.h:1238:38: error: ‘x_integer’ is not a type
 1238 |   t_integer::t_integer(t_digits max, x_integer value) noexcept
      |                                      ^~~~~~~~~
../dainty_base_numeric.h:1238:3: error: redefinition of ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
 1238 |   t_integer::t_integer(t_digits max, x_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1226:3: note: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ previously defined here
 1226 |   t_integer::t_integer(t_digits max, R_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1240:56: error: expected unqualified-id before ‘{’ token
 1240 |            static_cast<x_binary>(util::x_cast(value))} {
      |                                                        ^
../dainty_base_numeric.h:1245:24: error: ISO C++ forbids declaration of ‘t_integer’ with no type [-fpermissive]
 1245 |   t_integer::t_integer(R_binary value) noexcept : bin_{value} {
      |                        ^~~~~~~~
../dainty_base_numeric.h:1244:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1244 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1245:3: error: ‘int dainty::base::numeric::t_integer::t_integer’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1245 |   t_integer::t_integer(R_binary value) noexcept : bin_{value} {
      |   ^~~~~~~~~
../dainty_base_numeric.h:1245:24: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_binary’
 1245 |   t_integer::t_integer(R_binary value) noexcept : bin_{value} {
      |                        ^~~~~~~~
../dainty_base_numeric.h:256:25: note: declared here
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1245:63: error: expected unqualified-id before ‘{’ token
 1245 |   t_integer::t_integer(R_binary value) noexcept : bin_{value} {
      |                                                               ^
../dainty_base_numeric.h:1250:38: error: ‘R_binary’ is not a type
 1250 |   t_integer::t_integer(t_digits max, R_binary value) noexcept
      |                                      ^~~~~~~~
../dainty_base_numeric.h:1250:3: error: redefinition of ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
 1250 |   t_integer::t_integer(t_digits max, R_binary value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1226:3: note: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ previously defined here
 1226 |   t_integer::t_integer(t_digits max, R_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1251:43: error: expected unqualified-id before ‘{’ token
 1251 |     : bin_{impl_::calc_bits_(max), value} {
      |                                           ^
../dainty_base_numeric.h:1256:24: error: ISO C++ forbids declaration of ‘t_integer’ with no type [-fpermissive]
 1256 |   t_integer::t_integer(x_binary value) noexcept
      |                        ^~~~~~~~
../dainty_base_numeric.h:1255:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1255 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1256:3: error: ‘int dainty::base::numeric::t_integer::t_integer’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1256 |   t_integer::t_integer(x_binary value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1256:24: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::x_binary’
 1256 |   t_integer::t_integer(x_binary value) noexcept
      |                        ^~~~~~~~
../dainty_base_numeric.h:258:25: note: declared here
  258 |     t_integer(          x_binary)  noexcept; // INT_METHOD_1_9_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1257:33: error: expected unqualified-id before ‘{’ token
 1257 |     : bin_{util::x_cast(value)} {
      |                                 ^
../dainty_base_numeric.h:1262:38: error: ‘x_binary’ is not a type
 1262 |   t_integer::t_integer(t_digits max, x_binary value) noexcept
      |                                      ^~~~~~~~
../dainty_base_numeric.h:1262:3: error: redefinition of ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
 1262 |   t_integer::t_integer(t_digits max, x_binary value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1226:3: note: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’ previously defined here
 1226 |   t_integer::t_integer(t_digits max, R_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1263:57: error: expected unqualified-id before ‘{’ token
 1263 |     : bin_{impl_::calc_bits_(max), util::x_cast(value)} {
      |                                                         ^
../dainty_base_numeric.h:1283:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1283 |   r_integer t_integer::operator=(R_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1290:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1290 |   r_integer t_integer::operator=(x_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1297:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1297 |   r_integer t_integer::operator=(R_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1304:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1304 |   r_integer t_integer::operator=(x_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1312:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1312 |   r_integer t_integer::operator=(T value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1321:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1321 |   r_integer t_integer::operator+=(R_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1328:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1328 |   r_integer t_integer::operator+=(R_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1336:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1336 |   r_integer t_integer::operator+=(T value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1345:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1345 |   r_integer t_integer::operator-=(R_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1352:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1352 |   r_integer t_integer::operator-=(R_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1360:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1360 |   r_integer t_integer::operator-=(T value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1369:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1369 |   r_integer t_integer::operator*=(R_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1376:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1376 |   r_integer t_integer::operator*=(R_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1384:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1384 |   r_integer t_integer::operator*=(T value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1393:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1393 |   r_integer t_integer::operator/=(R_integer value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1400:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1400 |   r_integer t_integer::operator/=(R_binary value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h:1408:3: error: ‘r_integer’ does not name a type; did you mean ‘t_integer’?
 1408 |   r_integer t_integer::operator/=(T value) noexcept {
      |   ^~~~~~~~~
      |   t_integer
../dainty_base_numeric.h: In member function ‘dainty::base::numeric::t_integer dainty::base::numeric::t_integer::operator-() const’:
../dainty_base_numeric.h:1424:27: error: no matching function for call to ‘dainty::base::numeric::t_integer::t_integer(<brace-enclosed initializer list>)’
 1424 |     return t_integer{-bin_};
      |                           ^
../dainty_base_numeric.h:264:5: note: candidate: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, T)’
  264 |     t_integer(t_digits, T)         noexcept; // INT_METHOD_1_12_
      |     ^~~~~~~~~
../dainty_base_numeric.h:264:5: note:   template argument deduction/substitution failed:
../dainty_base_numeric.h:1424:27: note:   candidate expects 2 arguments, 1 provided
 1424 |     return t_integer{-bin_};
      |                           ^
../dainty_base_numeric.h:262:5: note: candidate: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer::t_integer(T)’
  262 |     t_integer(          T)         noexcept; // INT_METHOD_1_11_
      |     ^~~~~~~~~
../dainty_base_numeric.h:262:5: note:   template argument deduction/substitution failed:
../dainty_base_numeric.h:261:48: error: no type named ‘t_value’ in ‘struct dainty::base::traits::impl_::help_::t_if_then_<dainty::base::traits::impl_::t_false, dainty::base::types::t_well_formed>’
  261 |     template<typename T, t_if_int<T> = traits::WELL_FORMED>
      |                                                ^~~~~~~~~~~
../dainty_base_numeric.h:1226:3: note: candidate: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits, int)’
 1226 |   t_integer::t_integer(t_digits max, R_integer value) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1226:3: note:   candidate expects 2 arguments, 1 provided
../dainty_base_numeric.h:1215:3: note: candidate: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::impl_::t_digits)’
 1215 |   t_integer::t_integer(t_digits max) noexcept
      |   ^~~~~~~~~
../dainty_base_numeric.h:1215:33: note:   no known conversion for argument 1 from ‘dainty::base::numeric::t_binary’ to ‘dainty::base::numeric::impl_::t_digits’ {aka ‘dainty::base::logical::impl_::t_logical<long int, dainty::base::numeric::impl_::t_digits_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_n_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_i_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > > >’}
 1215 |   t_integer::t_integer(t_digits max) noexcept
      |                        ~~~~~~~~~^~~
../dainty_base_numeric.h:1210:3: note: candidate: ‘dainty::base::numeric::t_integer::t_integer()’
 1210 |   t_integer::t_integer() noexcept {
      |   ^~~~~~~~~
../dainty_base_numeric.h:1210:3: note:   candidate expects 0 arguments, 1 provided
../dainty_base_numeric.h:246:9: note: candidate: ‘dainty::base::numeric::t_integer::t_integer(const dainty::base::numeric::t_integer&)’
  246 |   class t_integer {
      |         ^~~~~~~~~
../dainty_base_numeric.h:246:9: note:   no known conversion for argument 1 from ‘dainty::base::numeric::t_binary’ to ‘const dainty::base::numeric::t_integer&’
../dainty_base_numeric.h:246:9: note: candidate: ‘dainty::base::numeric::t_integer::t_integer(dainty::base::numeric::t_integer&&)’
../dainty_base_numeric.h:246:9: note:   no known conversion for argument 1 from ‘dainty::base::numeric::t_binary’ to ‘dainty::base::numeric::t_integer&&’
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1443:23: error: expected type-specifier before ‘x_binary’
 1443 |   t_integer::operator x_binary() && noexcept {
      |                       ^~~~~~~~
../dainty_base_numeric.h:1449:23: error: expected type-specifier before ‘R_binary’
 1449 |   t_integer::operator R_binary() const noexcept {
      |                       ^~~~~~~~
../dainty_base_numeric.h:1468:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1468 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1469:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1469 |   t_bool t_integer::reset(R_integer value) noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1469:27: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_integer’
 1469 |   t_bool t_integer::reset(R_integer value) noexcept {
      |                           ^~~~~~~~~
../dainty_base_numeric.h:251:25: note: declared here
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1475:41: error: ‘R_integer’ is not a type
 1475 |   t_bool t_integer::reset(t_digits max, R_integer value) noexcept {
      |                                         ^~~~~~~~~
../dainty_base_numeric.h:1480:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1480 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1481:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1481 |   t_bool t_integer::reset(R_binary value) noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1481:27: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_binary’
 1481 |   t_bool t_integer::reset(R_binary value) noexcept {
      |                           ^~~~~~~~
../dainty_base_numeric.h:256:25: note: declared here
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1487:41: error: ‘R_binary’ is not a type
 1487 |   t_bool t_integer::reset(t_digits max, R_binary value) noexcept {
      |                                         ^~~~~~~~
../dainty_base_numeric.h:1487:10: error: redefinition of ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(dainty::base::numeric::impl_::t_digits, int)’
 1487 |   t_bool t_integer::reset(t_digits max, R_binary value) noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1475:10: note: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::reset(dainty::base::numeric::impl_::t_digits, int)’ previously defined here
 1475 |   t_bool t_integer::reset(t_digits max, R_integer value) noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1508:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1508 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1509:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_equal’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1509 |   t_bool t_integer::is_equal(R_integer value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1509:30: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_integer’
 1509 |   t_bool t_integer::is_equal(R_integer value) const noexcept {
      |                              ^~~~~~~~~
../dainty_base_numeric.h:251:25: note: declared here
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1514:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1514 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1515:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_equal’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1515 |   t_bool t_integer::is_equal(R_binary value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1515:30: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_binary’
 1515 |   t_bool t_integer::is_equal(R_binary value) const noexcept {
      |                              ^~~~~~~~
../dainty_base_numeric.h:256:25: note: declared here
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1529:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1529 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1530:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1530 |   t_bool t_integer::is_less(R_integer value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1530:29: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_integer’
 1530 |   t_bool t_integer::is_less(R_integer value) const noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h:251:25: note: declared here
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1535:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1535 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1536:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1536 |   t_bool t_integer::is_less(R_binary value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1536:29: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_binary’
 1536 |   t_bool t_integer::is_less(R_binary value) const noexcept {
      |                             ^~~~~~~~
../dainty_base_numeric.h:256:25: note: declared here
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1550:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1550 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1551:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less_equal’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1551 |   t_bool t_integer::is_less_equal(R_integer value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1551:35: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_integer’
 1551 |   t_bool t_integer::is_less_equal(R_integer value) const noexcept {
      |                                   ^~~~~~~~~
../dainty_base_numeric.h:251:25: note: declared here
  251 |     t_integer(          R_integer) noexcept; // INT_METHOD_1_3_
      |                         ^~~~~~~~~
../dainty_base_numeric.h:1556:3: warning: inline variables are only available with ‘-std=c++17’ or ‘-std=gnu++17’
 1556 |   inline
      |   ^~~~~~
../dainty_base_numeric.h:1557:10: error: ‘dainty::base::types::t_bool dainty::base::numeric::t_integer::is_less_equal’ is not a static data member of ‘class dainty::base::numeric::t_integer’
 1557 |   t_bool t_integer::is_less_equal(R_binary value) const noexcept {
      |          ^~~~~~~~~
../dainty_base_numeric.h:1557:35: error: invalid use of non-static data member ‘dainty::base::numeric::t_integer::R_binary’
 1557 |   t_bool t_integer::is_less_equal(R_binary value) const noexcept {
      |                                   ^~~~~~~~
../dainty_base_numeric.h:256:25: note: declared here
  256 |     t_integer(          R_binary)  noexcept; // INT_METHOD_1_7_
      |                         ^~~~~~~~
../dainty_base_numeric.h:1627:22: error: declaration of ‘operator+’ as non-function
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1627:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1627:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1633:22: error: declaration of ‘operator+’ as non-function
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1633:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1633:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1639:22: error: declaration of ‘operator+’ as non-function
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1639:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1639:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1645:22: error: declaration of ‘operator+’ as non-function
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1645:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1645:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1652:22: error: declaration of ‘operator+’ as non-function
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1652:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1652:37: error: expected primary-expression before ‘rh’
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1659:28: error: ‘R_binary’ has not been declared
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator+(T, int)’:
../dainty_base_numeric.h:1660:43: error: no match for ‘operator+=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1666:22: error: declaration of ‘operator+’ as non-function
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1666:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1666:37: error: expected primary-expression before ‘rh’
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1673:28: error: ‘x_binary’ has not been declared
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1673:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator+(T, int)’
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1659:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator+(T, int)’ previously declared here
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1681:22: error: declaration of ‘operator-’ as non-function
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1681:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1681:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1687:22: error: declaration of ‘operator-’ as non-function
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1687:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1687:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1693:22: error: declaration of ‘operator-’ as non-function
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1693:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1693:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1699:22: error: declaration of ‘operator-’ as non-function
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1699:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1699:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1706:22: error: declaration of ‘operator-’ as non-function
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1706:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1706:37: error: expected primary-expression before ‘rh’
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1713:28: error: ‘R_binary’ has not been declared
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator-(T, int)’:
../dainty_base_numeric.h:1714:43: error: no match for ‘operator-=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1720:22: error: declaration of ‘operator-’ as non-function
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1720:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1720:37: error: expected primary-expression before ‘rh’
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1727:28: error: ‘x_binary’ has not been declared
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1727:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator-(T, int)’
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1713:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator-(T, int)’ previously declared here
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1735:22: error: declaration of ‘operator*’ as non-function
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1735:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1735:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1741:22: error: declaration of ‘operator*’ as non-function
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1741:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1741:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1747:22: error: declaration of ‘operator*’ as non-function
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1747:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1747:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1753:22: error: declaration of ‘operator*’ as non-function
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1753:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1753:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1760:22: error: declaration of ‘operator*’ as non-function
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1760:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1760:37: error: expected primary-expression before ‘rh’
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1767:28: error: ‘R_binary’ has not been declared
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator*(T, int)’:
../dainty_base_numeric.h:1768:43: error: no match for ‘operator*=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                        
 1716 | 
      |                                            
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                         
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1719 |   inline
      |   ~~~~~~                                   
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1722 |   }
      |   ~                                        
 1723 | 
      |                                            
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                         
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1726 |   inline
      |   ~~~~~~                                   
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                        
 1730 | 
      |                                            
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                            
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                         
 1734 |   inline
      |   ~~~~~~                                   
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                        
 1738 | 
      |                                            
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                         
 1740 |   inline
      |   ~~~~~~                                   
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1743 |   }
      |   ~                                        
 1744 | 
      |                                            
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                         
 1746 |   inline
      |   ~~~~~~                                   
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                        
 1750 | 
      |                                            
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                         
 1752 |   inline
      |   ~~~~~~                                   
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                        
 1756 | 
      |                                            
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                         
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1759 |   inline
      |   ~~~~~~                                   
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                        
 1763 | 
      |                                            
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                         
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1766 |   inline
      |   ~~~~~~                                   
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1774:22: error: declaration of ‘operator*’ as non-function
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1774:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1774:37: error: expected primary-expression before ‘rh’
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1781:28: error: ‘x_binary’ has not been declared
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1781:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator*(T, int)’
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1767:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator*(T, int)’ previously declared here
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1789:22: error: declaration of ‘operator/’ as non-function
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1789:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1789:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1795:22: error: declaration of ‘operator/’ as non-function
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1795:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1795:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1801:22: error: declaration of ‘operator/’ as non-function
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1801:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1801:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1807:22: error: declaration of ‘operator/’ as non-function
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1807:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1807:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1814:22: error: declaration of ‘operator/’ as non-function
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1814:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1814:37: error: expected primary-expression before ‘rh’
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1821:28: error: ‘R_binary’ has not been declared
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator/(T, int)’:
../dainty_base_numeric.h:1822:43: error: no match for ‘operator/=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                        
 1716 | 
      |                                            
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                         
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1719 |   inline
      |   ~~~~~~                                   
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1722 |   }
      |   ~                                        
 1723 | 
      |                                            
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                         
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1726 |   inline
      |   ~~~~~~                                   
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                        
 1730 | 
      |                                            
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                            
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                         
 1734 |   inline
      |   ~~~~~~                                   
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                        
 1738 | 
      |                                            
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                         
 1740 |   inline
      |   ~~~~~~                                   
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1743 |   }
      |   ~                                        
 1744 | 
      |                                            
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                         
 1746 |   inline
      |   ~~~~~~                                   
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                        
 1750 | 
      |                                            
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                         
 1752 |   inline
      |   ~~~~~~                                   
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                        
 1756 | 
      |                                            
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                         
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1759 |   inline
      |   ~~~~~~                                   
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                        
 1763 | 
      |                                            
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                         
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1766 |   inline
      |   ~~~~~~                                   
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                        
 1770 | 
      |                                            
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                         
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1773 |   inline
      |   ~~~~~~                                   
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1776 |   }
      |   ~                                        
 1777 | 
      |                                            
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                         
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1780 |   inline
      |   ~~~~~~                                   
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                        
 1784 | 
      |                                            
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                            
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                         
 1788 |   inline
      |   ~~~~~~                                   
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                        
 1792 | 
      |                                            
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                         
 1794 |   inline
      |   ~~~~~~                                   
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1797 |   }
      |   ~                                        
 1798 | 
      |                                            
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                         
 1800 |   inline
      |   ~~~~~~                                   
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                        
 1804 | 
      |                                            
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                         
 1806 |   inline
      |   ~~~~~~                                   
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1809 |   }
      |   ~                                        
 1810 | 
      |                                            
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                         
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1813 |   inline
      |   ~~~~~~                                   
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                        
 1817 | 
      |                                            
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                         
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1820 |   inline
      |   ~~~~~~                                   
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1828:22: error: declaration of ‘operator/’ as non-function
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1828:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1828:37: error: expected primary-expression before ‘rh’
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1835:28: error: ‘x_binary’ has not been declared
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1835:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator/(T, int)’
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1821:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator/(T, int)’ previously declared here
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1843:22: error: declaration of ‘operator|’ as non-function
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1843:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1843:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1849:22: error: declaration of ‘operator|’ as non-function
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1849:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1849:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1855:22: error: declaration of ‘operator|’ as non-function
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1855:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1855:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1861:22: error: declaration of ‘operator|’ as non-function
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1861:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1861:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1868:22: error: declaration of ‘operator|’ as non-function
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1868:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1868:37: error: expected primary-expression before ‘rh’
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1875:28: error: ‘R_binary’ has not been declared
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator|(T, int)’:
../dainty_base_numeric.h:1876:43: error: no match for ‘operator|=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                        
 1716 | 
      |                                            
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                         
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1719 |   inline
      |   ~~~~~~                                   
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1722 |   }
      |   ~                                        
 1723 | 
      |                                            
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                         
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1726 |   inline
      |   ~~~~~~                                   
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                        
 1730 | 
      |                                            
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                            
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                         
 1734 |   inline
      |   ~~~~~~                                   
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                        
 1738 | 
      |                                            
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                         
 1740 |   inline
      |   ~~~~~~                                   
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1743 |   }
      |   ~                                        
 1744 | 
      |                                            
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                         
 1746 |   inline
      |   ~~~~~~                                   
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                        
 1750 | 
      |                                            
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                         
 1752 |   inline
      |   ~~~~~~                                   
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                        
 1756 | 
      |                                            
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                         
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1759 |   inline
      |   ~~~~~~                                   
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                        
 1763 | 
      |                                            
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                         
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1766 |   inline
      |   ~~~~~~                                   
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                        
 1770 | 
      |                                            
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                         
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1773 |   inline
      |   ~~~~~~                                   
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1776 |   }
      |   ~                                        
 1777 | 
      |                                            
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                         
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1780 |   inline
      |   ~~~~~~                                   
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                        
 1784 | 
      |                                            
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                            
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                         
 1788 |   inline
      |   ~~~~~~                                   
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                        
 1792 | 
      |                                            
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                         
 1794 |   inline
      |   ~~~~~~                                   
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1797 |   }
      |   ~                                        
 1798 | 
      |                                            
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                         
 1800 |   inline
      |   ~~~~~~                                   
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                        
 1804 | 
      |                                            
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                         
 1806 |   inline
      |   ~~~~~~                                   
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1809 |   }
      |   ~                                        
 1810 | 
      |                                            
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                         
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1813 |   inline
      |   ~~~~~~                                   
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                        
 1817 | 
      |                                            
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                         
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1820 |   inline
      |   ~~~~~~                                   
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                        
 1824 | 
      |                                            
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                         
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1827 |   inline
      |   ~~~~~~                                   
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1830 |   }
      |   ~                                        
 1831 | 
      |                                            
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                         
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1834 |   inline
      |   ~~~~~~                                   
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                        
 1838 | 
      |                                            
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                            
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                         
 1842 |   inline
      |   ~~~~~~                                   
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                        
 1846 | 
      |                                            
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                         
 1848 |   inline
      |   ~~~~~~                                   
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1851 |   }
      |   ~                                        
 1852 | 
      |                                            
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                         
 1854 |   inline
      |   ~~~~~~                                   
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                        
 1858 | 
      |                                            
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                         
 1860 |   inline
      |   ~~~~~~                                   
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                        
 1864 | 
      |                                            
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                         
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1867 |   inline
      |   ~~~~~~                                   
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                        
 1871 | 
      |                                            
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                         
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1874 |   inline
      |   ~~~~~~                                   
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1882:22: error: declaration of ‘operator|’ as non-function
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1882:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1882:37: error: expected primary-expression before ‘rh’
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1889:28: error: ‘x_binary’ has not been declared
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1889:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator|(T, int)’
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1875:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator|(T, int)’ previously declared here
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1897:22: error: declaration of ‘operator&’ as non-function
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1897:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1897:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1903:22: error: declaration of ‘operator&’ as non-function
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1903:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1903:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1909:22: error: declaration of ‘operator&’ as non-function
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1909:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1909:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1915:22: error: declaration of ‘operator&’ as non-function
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1915:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1915:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1922:22: error: declaration of ‘operator&’ as non-function
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1922:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1922:37: error: expected primary-expression before ‘rh’
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1929:28: error: ‘R_binary’ has not been declared
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator&(T, int)’:
../dainty_base_numeric.h:1930:43: error: no match for ‘operator&=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                        
 1716 | 
      |                                            
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                         
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1719 |   inline
      |   ~~~~~~                                   
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1722 |   }
      |   ~                                        
 1723 | 
      |                                            
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                         
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1726 |   inline
      |   ~~~~~~                                   
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                        
 1730 | 
      |                                            
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                            
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                         
 1734 |   inline
      |   ~~~~~~                                   
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                        
 1738 | 
      |                                            
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                         
 1740 |   inline
      |   ~~~~~~                                   
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1743 |   }
      |   ~                                        
 1744 | 
      |                                            
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                         
 1746 |   inline
      |   ~~~~~~                                   
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                        
 1750 | 
      |                                            
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                         
 1752 |   inline
      |   ~~~~~~                                   
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                        
 1756 | 
      |                                            
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                         
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1759 |   inline
      |   ~~~~~~                                   
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                        
 1763 | 
      |                                            
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                         
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1766 |   inline
      |   ~~~~~~                                   
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                        
 1770 | 
      |                                            
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                         
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1773 |   inline
      |   ~~~~~~                                   
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1776 |   }
      |   ~                                        
 1777 | 
      |                                            
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                         
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1780 |   inline
      |   ~~~~~~                                   
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                        
 1784 | 
      |                                            
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                            
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                         
 1788 |   inline
      |   ~~~~~~                                   
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                        
 1792 | 
      |                                            
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                         
 1794 |   inline
      |   ~~~~~~                                   
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1797 |   }
      |   ~                                        
 1798 | 
      |                                            
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                         
 1800 |   inline
      |   ~~~~~~                                   
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                        
 1804 | 
      |                                            
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                         
 1806 |   inline
      |   ~~~~~~                                   
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1809 |   }
      |   ~                                        
 1810 | 
      |                                            
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                         
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1813 |   inline
      |   ~~~~~~                                   
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                        
 1817 | 
      |                                            
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                         
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1820 |   inline
      |   ~~~~~~                                   
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                        
 1824 | 
      |                                            
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                         
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1827 |   inline
      |   ~~~~~~                                   
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1830 |   }
      |   ~                                        
 1831 | 
      |                                            
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                         
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1834 |   inline
      |   ~~~~~~                                   
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                        
 1838 | 
      |                                            
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                            
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                         
 1842 |   inline
      |   ~~~~~~                                   
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                        
 1846 | 
      |                                            
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                         
 1848 |   inline
      |   ~~~~~~                                   
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1851 |   }
      |   ~                                        
 1852 | 
      |                                            
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                         
 1854 |   inline
      |   ~~~~~~                                   
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                        
 1858 | 
      |                                            
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                         
 1860 |   inline
      |   ~~~~~~                                   
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                        
 1864 | 
      |                                            
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                         
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1867 |   inline
      |   ~~~~~~                                   
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                        
 1871 | 
      |                                            
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                         
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1874 |   inline
      |   ~~~~~~                                   
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                        
 1878 | 
      |                                            
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                         
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1881 |   inline
      |   ~~~~~~                                   
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1884 |   }
      |   ~                                        
 1885 | 
      |                                            
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                         
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1888 |   inline
      |   ~~~~~~                                   
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                        
 1892 | 
      |                                            
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                            
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                         
 1896 |   inline
      |   ~~~~~~                                   
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                        
 1900 | 
      |                                            
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                         
 1902 |   inline
      |   ~~~~~~                                   
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1905 |   }
      |   ~                                        
 1906 | 
      |                                            
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                         
 1908 |   inline
      |   ~~~~~~                                   
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                        
 1912 | 
      |                                            
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                         
 1914 |   inline
      |   ~~~~~~                                   
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                        
 1918 | 
      |                                            
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                         
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1921 |   inline
      |   ~~~~~~                                   
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                        
 1925 | 
      |                                            
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                         
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1928 |   inline
      |   ~~~~~~                                   
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1936:22: error: declaration of ‘operator&’ as non-function
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1936:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1936:37: error: expected primary-expression before ‘rh’
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1943:28: error: ‘x_binary’ has not been declared
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1943:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator&(T, int)’
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1929:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator&(T, int)’ previously declared here
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1951:22: error: declaration of ‘operator^’ as non-function
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1951:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1951:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1957:22: error: declaration of ‘operator^’ as non-function
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1957:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1957:35: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1963:22: error: declaration of ‘operator^’ as non-function
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1963:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1963:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1969:22: error: declaration of ‘operator^’ as non-function
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1969:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1969:35: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |                                   ^~~~~~~~
      |                                   t_binary
../dainty_base_numeric.h:1976:22: error: declaration of ‘operator^’ as non-function
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1976:22: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1976:37: error: expected primary-expression before ‘rh’
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1983:28: error: ‘R_binary’ has not been declared
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator^(T, int)’:
../dainty_base_numeric.h:1984:43: error: no match for ‘operator^=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                       
 1609 | 
      |                                            
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                          
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1613 | 
      |                                            
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                   
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                      
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1618 | 
      |                                            
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                          
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~             
 1622 | 
      |                                            
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                            
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                          
 1626 |   inline
      |   ~~~~~~                                   
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                        
 1630 | 
      |                                            
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                         
 1632 |   inline
      |   ~~~~~~                                   
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1635 |   }
      |   ~                                        
 1636 | 
      |                                            
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                         
 1638 |   inline
      |   ~~~~~~                                   
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                        
 1642 | 
      |                                            
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                         
 1644 |   inline
      |   ~~~~~~                                   
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                        
 1648 | 
      |                                            
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                         
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1651 |   inline
      |   ~~~~~~                                   
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                        
 1655 | 
      |                                            
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                         
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1658 |   inline
      |   ~~~~~~                                   
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                        
 1662 | 
      |                                            
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                         
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1665 |   inline
      |   ~~~~~~                                   
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1668 |   }
      |   ~                                        
 1669 | 
      |                                            
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                         
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1672 |   inline
      |   ~~~~~~                                   
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                        
 1676 | 
      |                                            
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                            
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                         
 1680 |   inline
      |   ~~~~~~                                   
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                        
 1684 | 
      |                                            
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                         
 1686 |   inline
      |   ~~~~~~                                   
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1689 |   }
      |   ~                                        
 1690 | 
      |                                            
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                         
 1692 |   inline
      |   ~~~~~~                                   
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                        
 1696 | 
      |                                            
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                         
 1698 |   inline
      |   ~~~~~~                                   
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1701 |   }
      |   ~                                        
 1702 | 
      |                                            
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                         
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1705 |   inline
      |   ~~~~~~                                   
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                        
 1709 | 
      |                                            
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                         
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1712 |   inline
      |   ~~~~~~                                   
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                        
 1716 | 
      |                                            
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                         
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1719 |   inline
      |   ~~~~~~                                   
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1722 |   }
      |   ~                                        
 1723 | 
      |                                            
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                         
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1726 |   inline
      |   ~~~~~~                                   
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                        
 1730 | 
      |                                            
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                            
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                         
 1734 |   inline
      |   ~~~~~~                                   
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                        
 1738 | 
      |                                            
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                         
 1740 |   inline
      |   ~~~~~~                                   
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1743 |   }
      |   ~                                        
 1744 | 
      |                                            
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                         
 1746 |   inline
      |   ~~~~~~                                   
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                        
 1750 | 
      |                                            
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                         
 1752 |   inline
      |   ~~~~~~                                   
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                        
 1756 | 
      |                                            
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                         
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1759 |   inline
      |   ~~~~~~                                   
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                        
 1763 | 
      |                                            
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                         
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1766 |   inline
      |   ~~~~~~                                   
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                        
 1770 | 
      |                                            
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                         
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1773 |   inline
      |   ~~~~~~                                   
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1776 |   }
      |   ~                                        
 1777 | 
      |                                            
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                         
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1780 |   inline
      |   ~~~~~~                                   
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                        
 1784 | 
      |                                            
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                            
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                         
 1788 |   inline
      |   ~~~~~~                                   
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                        
 1792 | 
      |                                            
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                         
 1794 |   inline
      |   ~~~~~~                                   
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1797 |   }
      |   ~                                        
 1798 | 
      |                                            
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                         
 1800 |   inline
      |   ~~~~~~                                   
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                        
 1804 | 
      |                                            
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                         
 1806 |   inline
      |   ~~~~~~                                   
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1809 |   }
      |   ~                                        
 1810 | 
      |                                            
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                         
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1813 |   inline
      |   ~~~~~~                                   
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                        
 1817 | 
      |                                            
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                         
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1820 |   inline
      |   ~~~~~~                                   
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                        
 1824 | 
      |                                            
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                         
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1827 |   inline
      |   ~~~~~~                                   
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1830 |   }
      |   ~                                        
 1831 | 
      |                                            
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                         
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1834 |   inline
      |   ~~~~~~                                   
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                        
 1838 | 
      |                                            
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                            
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                         
 1842 |   inline
      |   ~~~~~~                                   
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                        
 1846 | 
      |                                            
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                         
 1848 |   inline
      |   ~~~~~~                                   
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1851 |   }
      |   ~                                        
 1852 | 
      |                                            
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                         
 1854 |   inline
      |   ~~~~~~                                   
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                        
 1858 | 
      |                                            
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                         
 1860 |   inline
      |   ~~~~~~                                   
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                        
 1864 | 
      |                                            
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                         
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1867 |   inline
      |   ~~~~~~                                   
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                        
 1871 | 
      |                                            
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                         
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1874 |   inline
      |   ~~~~~~                                   
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                        
 1878 | 
      |                                            
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                         
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1881 |   inline
      |   ~~~~~~                                   
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1884 |   }
      |   ~                                        
 1885 | 
      |                                            
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                         
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1888 |   inline
      |   ~~~~~~                                   
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                        
 1892 | 
      |                                            
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                            
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                         
 1896 |   inline
      |   ~~~~~~                                   
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                        
 1900 | 
      |                                            
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                         
 1902 |   inline
      |   ~~~~~~                                   
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1905 |   }
      |   ~                                        
 1906 | 
      |                                            
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                         
 1908 |   inline
      |   ~~~~~~                                   
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                        
 1912 | 
      |                                            
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                         
 1914 |   inline
      |   ~~~~~~                                   
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                        
 1918 | 
      |                                            
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                         
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1921 |   inline
      |   ~~~~~~                                   
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                        
 1925 | 
      |                                            
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                         
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1928 |   inline
      |   ~~~~~~                                   
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1931 |   }
      |   ~                                        
 1932 | 
      |                                            
 1933 |   // BIN_FUNC_6_7_
      |   ~~~~~~~~~~~~~~~~                         
 1934 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1935 |   inline
      |   ~~~~~~                                   
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1937 |     DAINTY_BASE_NUMERIC_OP_X_T_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1938 |   }
      |   ~                                        
 1939 | 
      |                                            
 1940 |   // BIN_FUNC_6_8_
      |   ~~~~~~~~~~~~~~~~                         
 1941 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1942 |   inline
      |   ~~~~~~                                   
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1944 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1945 |   }
      |   ~                                        
 1946 | 
      |                                            
 1947 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1948 | 
      |                                            
 1949 |   // BIN_FUNC_7_1_
      |   ~~~~~~~~~~~~~~~~                         
 1950 |   inline
      |   ~~~~~~                                   
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1952 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1953 |   }
      |   ~                                        
 1954 | 
      |                                            
 1955 |   // BIN_FUNC_7_2_
      |   ~~~~~~~~~~~~~~~~                         
 1956 |   inline
      |   ~~~~~~                                   
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1958 |     DAINTY_BASE_NUMERIC_OP_X_R_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1959 |   }
      |   ~                                        
 1960 | 
      |                                            
 1961 |   // BIN_FUNC_7_3_
      |   ~~~~~~~~~~~~~~~~                         
 1962 |   inline
      |   ~~~~~~                                   
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1964 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1965 |   }
      |   ~                                        
 1966 | 
      |                                            
 1967 |   // BIN_FUNC_7_4_
      |   ~~~~~~~~~~~~~~~~                         
 1968 |   inline
      |   ~~~~~~                                   
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1970 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(^=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1971 |   }
      |   ~                                        
 1972 | 
      |                                            
 1973 |   // BIN_FUNC_7_5_
      |   ~~~~~~~~~~~~~~~~                         
 1974 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1975 |   inline
      |   ~~~~~~                                   
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1977 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1978 |   }
      |   ~                                        
 1979 | 
      |                                            
 1980 |   // BIN_FUNC_7_6_
      |   ~~~~~~~~~~~~~~~~                         
 1981 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        
 1982 |   inline
      |   ~~~~~~                                   
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1984 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:1990:22: error: declaration of ‘operator^’ as non-function
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
../dainty_base_numeric.h:1990:22: error: ‘x_binary’ was not declared in this scope; did you mean ‘t_binary’?
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |                      ^~~~~~~~
      |                      t_binary
../dainty_base_numeric.h:1990:37: error: expected primary-expression before ‘rh’
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:1997:28: error: ‘x_binary’ has not been declared
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |                            ^~~~~~~~
../dainty_base_numeric.h:1997:12: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator^(T, int)’
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h:1983:12: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_binary dainty::base::numeric::operator^(T, int)’ previously declared here
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |            ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator>>(dainty::base::numeric::t_binary, dainty::base::numeric::impl_::t_bits)’:
../dainty_base_numeric.h:2006:33: error: no match for ‘operator>>=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘dainty::base::numeric::impl_::t_bits’ {aka ‘dainty::base::logical::impl_::t_logical<long int, dainty::base::numeric::impl_::t_bits_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_n_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_i_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > > >’})
 2006 |     DAINTY_BASE_NUMERIC_OP_X_T_(>>=, lh, n)
      |                                      ~~~~~
../dainty_base_numeric.h:1611:10: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_X_T_’
 1611 |       lh op rh; \
      |          ^~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_binary dainty::base::numeric::operator<<(dainty::base::numeric::t_binary, dainty::base::numeric::impl_::t_bits)’:
../dainty_base_numeric.h:2014:33: error: no match for ‘operator<<=’ (operand types are ‘dainty::base::numeric::t_binary’ and ‘dainty::base::numeric::impl_::t_bits’ {aka ‘dainty::base::logical::impl_::t_logical<long int, dainty::base::numeric::impl_::t_bits_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_n_tag_, dainty::base::logical::impl_::t_logical<long unsigned int, dainty::base::types::t_u_tag_, dainty::base::logical::impl_::t_logical<long int, dainty::base::types::t_i_tag_, dainty::base::logical::impl_::t_logical<bool, dainty::base::types::t_truth_tag_> > > > >’})
 2014 |     DAINTY_BASE_NUMERIC_OP_X_T_(<<=, lh, n)
      |                                      ~~~~~
../dainty_base_numeric.h:1611:10: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_X_T_’
 1611 |       lh op rh; \
      |          ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2021:21: error: declaration of ‘operator==’ as non-function
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2021:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2021:34: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |                                  ^~~~~~~~
      |                                  t_binary
../dainty_base_numeric.h:2028:21: error: declaration of ‘operator==’ as non-function
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2028:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2028:36: error: expected primary-expression before ‘rh’
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2035:27: error: ‘R_binary’ has not been declared
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |                           ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator==(T, int)’:
../dainty_base_numeric.h:2036:15: error: request for member ‘is_equal’ in ‘rh’, which is of non-class type ‘int’
 2036 |     return rh.is_equal(lh);
      |               ^~~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2043:21: error: declaration of ‘operator!=’ as non-function
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2043:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2043:34: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |                                  ^~~~~~~~
      |                                  t_binary
../dainty_base_numeric.h:2050:21: error: declaration of ‘operator!=’ as non-function
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2050:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2050:36: error: expected primary-expression before ‘rh’
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2057:27: error: ‘R_binary’ has not been declared
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |                           ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator!=(T, int)’:
../dainty_base_numeric.h:2058:16: error: request for member ‘is_equal’ in ‘rh’, which is of non-class type ‘int’
 2058 |     return !rh.is_equal(lh);
      |                ^~~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2065:20: error: declaration of ‘operator<’ as non-function
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |                    ^~~~~~~~
../dainty_base_numeric.h:2065:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:2065:33: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |                                 ^~~~~~~~
      |                                 t_binary
../dainty_base_numeric.h:2072:20: error: declaration of ‘operator<’ as non-function
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |                    ^~~~~~~~
../dainty_base_numeric.h:2072:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:2072:35: error: expected primary-expression before ‘rh’
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |                                   ^~
../dainty_base_numeric.h:2079:26: error: ‘R_binary’ has not been declared
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |                          ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator<(T, int)’:
../dainty_base_numeric.h:2080:16: error: request for member ‘is_less_equal’ in ‘rh’, which is of non-class type ‘int’
 2080 |     return !rh.is_less_equal(lh);
      |                ^~~~~~~~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2087:21: error: declaration of ‘operator<=’ as non-function
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2087:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2087:34: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |                                  ^~~~~~~~
      |                                  t_binary
../dainty_base_numeric.h:2094:21: error: declaration of ‘operator<=’ as non-function
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2094:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2094:36: error: expected primary-expression before ‘rh’
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2101:27: error: ‘R_binary’ has not been declared
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |                           ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator<=(T, int)’:
../dainty_base_numeric.h:2102:16: error: request for member ‘is_less’ in ‘rh’, which is of non-class type ‘int’
 2102 |     return !rh.is_less(lh);
      |                ^~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2109:20: error: declaration of ‘operator>’ as non-function
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |                    ^~~~~~~~
../dainty_base_numeric.h:2109:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:2109:33: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |                                 ^~~~~~~~
      |                                 t_binary
../dainty_base_numeric.h:2116:20: error: declaration of ‘operator>’ as non-function
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |                    ^~~~~~~~
../dainty_base_numeric.h:2116:20: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |                    ^~~~~~~~
      |                    t_binary
../dainty_base_numeric.h:2116:35: error: expected primary-expression before ‘rh’
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |                                   ^~
../dainty_base_numeric.h:2123:26: error: ‘R_binary’ has not been declared
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |                          ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator>(T, int)’:
../dainty_base_numeric.h:2124:15: error: request for member ‘is_less’ in ‘rh’, which is of non-class type ‘int’
 2124 |     return rh.is_less(lh);
      |               ^~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2131:21: error: declaration of ‘operator>=’ as non-function
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2131:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2131:34: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |                                  ^~~~~~~~
      |                                  t_binary
../dainty_base_numeric.h:2138:21: error: declaration of ‘operator>=’ as non-function
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
../dainty_base_numeric.h:2138:21: error: ‘R_binary’ was not declared in this scope; did you mean ‘t_binary’?
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |                     ^~~~~~~~
      |                     t_binary
../dainty_base_numeric.h:2138:36: error: expected primary-expression before ‘rh’
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2145:27: error: ‘R_binary’ has not been declared
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |                           ^~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::types::t_bool dainty::base::numeric::operator>=(T, int)’:
../dainty_base_numeric.h:2146:15: error: request for member ‘is_less_equal’ in ‘rh’, which is of non-class type ‘int’
 2146 |     return rh.is_less_equal(lh);
      |               ^~~~~~~~~~~~~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2153:23: error: declaration of ‘operator+’ as non-function
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2153:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2153:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2159:23: error: declaration of ‘operator+’ as non-function
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2159:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2159:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2165:23: error: declaration of ‘operator+’ as non-function
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2165:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2165:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2171:23: error: declaration of ‘operator+’ as non-function
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2171:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2171:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2178:23: error: declaration of ‘operator+’ as non-function
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2178:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2178:39: error: expected primary-expression before ‘rh’
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2185:29: error: ‘R_integer’ has not been declared
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_integer dainty::base::numeric::operator+(T, int)’:
../dainty_base_numeric.h:2186:44: error: no match for ‘operator+=’ (operand types are ‘dainty::base::numeric::t_integer’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                        
 1609 | 
      |                                             
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                           
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1613 | 
      |                                             
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                    
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1618 | 
      |                                             
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                           
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1622 | 
      |                                             
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                             
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                           
 1626 |   inline
      |   ~~~~~~                                    
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                         
 1630 | 
      |                                             
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 1632 |   inline
      |   ~~~~~~                                    
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1635 |   }
      |   ~                                         
 1636 | 
      |                                             
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 1638 |   inline
      |   ~~~~~~                                    
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                         
 1642 | 
      |                                             
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 1644 |   inline
      |   ~~~~~~                                    
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                         
 1648 | 
      |                                             
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1651 |   inline
      |   ~~~~~~                                    
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                         
 1655 | 
      |                                             
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1658 |   inline
      |   ~~~~~~                                    
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                         
 1662 | 
      |                                             
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1665 |   inline
      |   ~~~~~~                                    
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1668 |   }
      |   ~                                         
 1669 | 
      |                                             
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1672 |   inline
      |   ~~~~~~                                    
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                         
 1676 | 
      |                                             
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                             
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 1680 |   inline
      |   ~~~~~~                                    
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                         
 1684 | 
      |                                             
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 1686 |   inline
      |   ~~~~~~                                    
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1689 |   }
      |   ~                                         
 1690 | 
      |                                             
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 1692 |   inline
      |   ~~~~~~                                    
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                         
 1696 | 
      |                                             
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 1698 |   inline
      |   ~~~~~~                                    
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1701 |   }
      |   ~                                         
 1702 | 
      |                                             
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1705 |   inline
      |   ~~~~~~                                    
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                         
 1709 | 
      |                                             
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1712 |   inline
      |   ~~~~~~                                    
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                         
 1716 | 
      |                                             
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1719 |   inline
      |   ~~~~~~                                    
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1722 |   }
      |   ~                                         
 1723 | 
      |                                             
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1726 |   inline
      |   ~~~~~~                                    
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                         
 1730 | 
      |                                             
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                             
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 1734 |   inline
      |   ~~~~~~                                    
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                         
 1738 | 
      |                                             
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 1740 |   inline
      |   ~~~~~~                                    
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1743 |   }
      |   ~                                         
 1744 | 
      |                                             
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 1746 |   inline
      |   ~~~~~~                                    
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                         
 1750 | 
      |                                             
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 1752 |   inline
      |   ~~~~~~                                    
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                         
 1756 | 
      |                                             
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1759 |   inline
      |   ~~~~~~                                    
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                         
 1763 | 
      |                                             
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1766 |   inline
      |   ~~~~~~                                    
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                         
 1770 | 
      |                                             
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                          
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1773 |   inline
      |   ~~~~~~                                    
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1776 |   }
      |   ~                                         
 1777 | 
      |                                             
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                          
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1780 |   inline
      |   ~~~~~~                                    
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                         
 1784 | 
      |                                             
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                             
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                          
 1788 |   inline
      |   ~~~~~~                                    
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                         
 1792 | 
      |                                             
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                          
 1794 |   inline
      |   ~~~~~~                                    
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1797 |   }
      |   ~                                         
 1798 | 
      |                                             
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                          
 1800 |   inline
      |   ~~~~~~                                    
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                         
 1804 | 
      |                                             
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                          
 1806 |   inline
      |   ~~~~~~                                    
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1809 |   }
      |   ~                                         
 1810 | 
      |                                             
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                          
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1813 |   inline
      |   ~~~~~~                                    
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                         
 1817 | 
      |                                             
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                          
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1820 |   inline
      |   ~~~~~~                                    
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                         
 1824 | 
      |                                             
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                          
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1827 |   inline
      |   ~~~~~~                                    
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1830 |   }
      |   ~                                         
 1831 | 
      |                                             
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                          
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1834 |   inline
      |   ~~~~~~                                    
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                         
 1838 | 
      |                                             
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                             
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                          
 1842 |   inline
      |   ~~~~~~                                    
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                         
 1846 | 
      |                                             
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                          
 1848 |   inline
      |   ~~~~~~                                    
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1851 |   }
      |   ~                                         
 1852 | 
      |                                             
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                          
 1854 |   inline
      |   ~~~~~~                                    
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                         
 1858 | 
      |                                             
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                          
 1860 |   inline
      |   ~~~~~~                                    
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                         
 1864 | 
      |                                             
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                          
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1867 |   inline
      |   ~~~~~~                                    
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                         
 1871 | 
      |                                             
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                          
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1874 |   inline
      |   ~~~~~~                                    
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                         
 1878 | 
      |                                             
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                          
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1881 |   inline
      |   ~~~~~~                                    
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1884 |   }
      |   ~                                         
 1885 | 
      |                                             
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                          
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1888 |   inline
      |   ~~~~~~                                    
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                         
 1892 | 
      |                                             
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                             
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                          
 1896 |   inline
      |   ~~~~~~                                    
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                         
 1900 | 
      |                                             
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                          
 1902 |   inline
      |   ~~~~~~                                    
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1905 |   }
      |   ~                                         
 1906 | 
      |                                             
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                          
 1908 |   inline
      |   ~~~~~~                                    
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                         
 1912 | 
      |                                             
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                          
 1914 |   inline
      |   ~~~~~~                                    
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                         
 1918 | 
      |                                             
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                          
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1921 |   inline
      |   ~~~~~~                                    
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                         
 1925 | 
      |                                             
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                          
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1928 |   inline
      |   ~~~~~~                                    
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1931 |   }
      |   ~                                         
 1932 | 
      |                                             
 1933 |   // BIN_FUNC_6_7_
      |   ~~~~~~~~~~~~~~~~                          
 1934 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1935 |   inline
      |   ~~~~~~                                    
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1937 |     DAINTY_BASE_NUMERIC_OP_X_T_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1938 |   }
      |   ~                                         
 1939 | 
      |                                             
 1940 |   // BIN_FUNC_6_8_
      |   ~~~~~~~~~~~~~~~~                          
 1941 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1942 |   inline
      |   ~~~~~~                                    
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1944 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1945 |   }
      |   ~                                         
 1946 | 
      |                                             
 1947 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1948 | 
      |                                             
 1949 |   // BIN_FUNC_7_1_
      |   ~~~~~~~~~~~~~~~~                          
 1950 |   inline
      |   ~~~~~~                                    
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1952 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1953 |   }
      |   ~                                         
 1954 | 
      |                                             
 1955 |   // BIN_FUNC_7_2_
      |   ~~~~~~~~~~~~~~~~                          
 1956 |   inline
      |   ~~~~~~                                    
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1958 |     DAINTY_BASE_NUMERIC_OP_X_R_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1959 |   }
      |   ~                                         
 1960 | 
      |                                             
 1961 |   // BIN_FUNC_7_3_
      |   ~~~~~~~~~~~~~~~~                          
 1962 |   inline
      |   ~~~~~~                                    
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1964 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1965 |   }
      |   ~                                         
 1966 | 
      |                                             
 1967 |   // BIN_FUNC_7_4_
      |   ~~~~~~~~~~~~~~~~                          
 1968 |   inline
      |   ~~~~~~                                    
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1970 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(^=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1971 |   }
      |   ~                                         
 1972 | 
      |                                             
 1973 |   // BIN_FUNC_7_5_
      |   ~~~~~~~~~~~~~~~~                          
 1974 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1975 |   inline
      |   ~~~~~~                                    
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1977 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1978 |   }
      |   ~                                         
 1979 | 
      |                                             
 1980 |   // BIN_FUNC_7_6_
      |   ~~~~~~~~~~~~~~~~                          
 1981 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1982 |   inline
      |   ~~~~~~                                    
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1984 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1985 |   }
      |   ~                                         
 1986 | 
      |                                             
 1987 |   // BIN_FUNC_7_7_
      |   ~~~~~~~~~~~~~~~~                          
 1988 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1989 |   inline
      |   ~~~~~~                                    
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1991 |     DAINTY_BASE_NUMERIC_OP_X_T_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1992 |   }
      |   ~                                         
 1993 | 
      |                                             
 1994 |   // BIN_FUNC_7_8_
      |   ~~~~~~~~~~~~~~~~                          
 1995 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1996 |   inline
      |   ~~~~~~                                    
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1998 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1999 |   }
      |   ~                                         
 2000 | 
      |                                             
 2001 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2002 | 
      |                                             
 2003 |   // BIN_FUNC_8_
      |   ~~~~~~~~~~~~~~                            
 2004 |   inline
      |   ~~~~~~                                    
 2005 |   t_binary operator>>(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2006 |     DAINTY_BASE_NUMERIC_OP_X_T_(>>=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2007 |   }
      |   ~                                         
 2008 | 
      |                                             
 2009 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2010 | 
      |                                             
 2011 |   // BIN_FUNC_9_
      |   ~~~~~~~~~~~~~~                            
 2012 |   inline
      |   ~~~~~~                                    
 2013 |   t_binary operator<<(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2014 |     DAINTY_BASE_NUMERIC_OP_X_T_(<<=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2015 |   }
      |   ~                                         
 2016 | 
      |                                             
 2017 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2018 | 
      |                                             
 2019 |   // BIN_FUNC_10_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2020 |   inline
      |   ~~~~~~                                    
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2022 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2023 |   }
      |   ~                                         
 2024 | 
      |                                             
 2025 |   // BIN_FUNC_10_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2026 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2027 |   inline
      |   ~~~~~~                                    
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2029 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2030 |   }
      |   ~                                         
 2031 | 
      |                                             
 2032 |   // BIN_FUNC_10_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2033 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2034 |   inline
      |   ~~~~~~                                    
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2036 |     return rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2037 |   }
      |   ~                                         
 2038 | 
      |                                             
 2039 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2040 | 
      |                                             
 2041 |   // BIN_FUNC_11_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2042 |   inline
      |   ~~~~~~                                    
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2044 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2045 |   }
      |   ~                                         
 2046 | 
      |                                             
 2047 |   // BIN_FUNC_11_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2048 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2049 |   inline
      |   ~~~~~~                                    
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2051 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2052 |   }
      |   ~                                         
 2053 | 
      |                                             
 2054 |   // BIN_FUNC_11_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2055 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2056 |   inline
      |   ~~~~~~                                    
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2058 |     return !rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2059 |   }
      |   ~                                         
 2060 | 
      |                                             
 2061 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2062 | 
      |                                             
 2063 |   // BIN_FUNC_12_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2064 |   inline
      |   ~~~~~~                                    
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2066 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2067 |   }
      |   ~                                         
 2068 | 
      |                                             
 2069 |   // BIN_FUNC_12_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2070 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2071 |   inline
      |   ~~~~~~                                    
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2073 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2074 |   }
      |   ~                                         
 2075 | 
      |                                             
 2076 |   // BIN_FUNC_12_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2077 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2078 |   inline
      |   ~~~~~~                                    
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2080 |     return !rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2081 |   }
      |   ~                                         
 2082 | 
      |                                             
 2083 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2084 | 
      |                                             
 2085 |   // BIN_FUNC_13_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2086 |   inline
      |   ~~~~~~                                    
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2088 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2089 |   }
      |   ~                                         
 2090 | 
      |                                             
 2091 |   // BIN_FUNC_13_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2092 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2093 |   inline
      |   ~~~~~~                                    
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2095 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2096 |   }
      |   ~                                         
 2097 | 
      |                                             
 2098 |   // BIN_FUNC_13_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2099 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2100 |   inline
      |   ~~~~~~                                    
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2102 |     return !rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2103 |   }
      |   ~                                         
 2104 | 
      |                                             
 2105 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2106 | 
      |                                             
 2107 |   // BIN_FUNC_14_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2108 |   inline
      |   ~~~~~~                                    
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2110 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2111 |   }
      |   ~                                         
 2112 | 
      |                                             
 2113 |   // BIN_FUNC_14_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2114 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2115 |   inline
      |   ~~~~~~                                    
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2117 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2118 |   }
      |   ~                                         
 2119 | 
      |                                             
 2120 |   // BIN_FUNC_14_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2121 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2122 |   inline
      |   ~~~~~~                                    
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2124 |     return rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2125 |   }
      |   ~                                         
 2126 | 
      |                                             
 2127 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2128 | 
      |                                             
 2129 |   // BIN_FUNC_15_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2130 |   inline
      |   ~~~~~~                                    
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2132 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2133 |   }
      |   ~                                         
 2134 | 
      |                                             
 2135 |   // BIN_FUNC_15_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2136 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2137 |   inline
      |   ~~~~~~                                    
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2139 |     return !lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2140 |   }
      |   ~                                         
 2141 | 
      |                                             
 2142 |   // BIN_FUNC_15_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2143 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2144 |   inline
      |   ~~~~~~                                    
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2146 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2147 |   }
      |   ~                                         
 2148 | 
      |                                             
 2149 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2150 | 
      |                                             
 2151 |   // INT_FUNC_1_1_
      |   ~~~~~~~~~~~~~~~~                          
 2152 |   inline
      |   ~~~~~~                                    
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2154 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2155 |   }
      |   ~                                         
 2156 | 
      |                                             
 2157 |   // INT_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 2158 |   inline
      |   ~~~~~~                                    
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2160 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2161 |   }
      |   ~                                         
 2162 | 
      |                                             
 2163 |   // INT_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 2164 |   inline
      |   ~~~~~~                                    
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2166 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2167 |   }
      |   ~                                         
 2168 | 
      |                                             
 2169 |   // INT_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 2170 |   inline
      |   ~~~~~~                                    
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2172 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2173 |   }
      |   ~                                         
 2174 | 
      |                                             
 2175 |   // INT_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 2176 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2177 |   inline
      |   ~~~~~~                                    
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2179 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2180 |   }
      |   ~                                         
 2181 | 
      |                                             
 2182 |   // INT_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 2183 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2184 |   inline
      |   ~~~~~~                                    
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2186 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2192:23: error: declaration of ‘operator+’ as non-function
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2192:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2192:39: error: expected primary-expression before ‘rh’
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2199:29: error: ‘x_integer’ has not been declared
 2199 |   t_integer operator+(T lh, x_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h:2199:13: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator+(T, int)’
 2199 |   t_integer operator+(T lh, x_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2185:13: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator+(T, int)’ previously declared here
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2207:23: error: declaration of ‘operator-’ as non-function
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2207:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2207:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2213:23: error: declaration of ‘operator-’ as non-function
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2213:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2213:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2219:23: error: declaration of ‘operator-’ as non-function
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2219:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2219:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2225:23: error: declaration of ‘operator-’ as non-function
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2225:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2225:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2232:23: error: declaration of ‘operator-’ as non-function
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2232:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2232:39: error: expected primary-expression before ‘rh’
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2239:29: error: ‘R_integer’ has not been declared
 2239 |   t_integer operator-(T lh, R_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_integer dainty::base::numeric::operator-(T, int)’:
../dainty_base_numeric.h:2240:44: error: no match for ‘operator-=’ (operand types are ‘dainty::base::numeric::t_integer’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                        
 1609 | 
      |                                             
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                           
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1613 | 
      |                                             
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                    
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1618 | 
      |                                             
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                           
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1622 | 
      |                                             
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                             
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                           
 1626 |   inline
      |   ~~~~~~                                    
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                         
 1630 | 
      |                                             
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 1632 |   inline
      |   ~~~~~~                                    
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1635 |   }
      |   ~                                         
 1636 | 
      |                                             
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 1638 |   inline
      |   ~~~~~~                                    
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                         
 1642 | 
      |                                             
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 1644 |   inline
      |   ~~~~~~                                    
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                         
 1648 | 
      |                                             
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1651 |   inline
      |   ~~~~~~                                    
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                         
 1655 | 
      |                                             
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1658 |   inline
      |   ~~~~~~                                    
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                         
 1662 | 
      |                                             
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1665 |   inline
      |   ~~~~~~                                    
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1668 |   }
      |   ~                                         
 1669 | 
      |                                             
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1672 |   inline
      |   ~~~~~~                                    
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                         
 1676 | 
      |                                             
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                             
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 1680 |   inline
      |   ~~~~~~                                    
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                         
 1684 | 
      |                                             
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 1686 |   inline
      |   ~~~~~~                                    
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1689 |   }
      |   ~                                         
 1690 | 
      |                                             
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 1692 |   inline
      |   ~~~~~~                                    
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                         
 1696 | 
      |                                             
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 1698 |   inline
      |   ~~~~~~                                    
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1701 |   }
      |   ~                                         
 1702 | 
      |                                             
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1705 |   inline
      |   ~~~~~~                                    
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                         
 1709 | 
      |                                             
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1712 |   inline
      |   ~~~~~~                                    
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                         
 1716 | 
      |                                             
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1719 |   inline
      |   ~~~~~~                                    
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1722 |   }
      |   ~                                         
 1723 | 
      |                                             
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1726 |   inline
      |   ~~~~~~                                    
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                         
 1730 | 
      |                                             
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                             
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 1734 |   inline
      |   ~~~~~~                                    
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                         
 1738 | 
      |                                             
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 1740 |   inline
      |   ~~~~~~                                    
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1743 |   }
      |   ~                                         
 1744 | 
      |                                             
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 1746 |   inline
      |   ~~~~~~                                    
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                         
 1750 | 
      |                                             
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 1752 |   inline
      |   ~~~~~~                                    
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                         
 1756 | 
      |                                             
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1759 |   inline
      |   ~~~~~~                                    
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                         
 1763 | 
      |                                             
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1766 |   inline
      |   ~~~~~~                                    
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                         
 1770 | 
      |                                             
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                          
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1773 |   inline
      |   ~~~~~~                                    
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1776 |   }
      |   ~                                         
 1777 | 
      |                                             
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                          
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1780 |   inline
      |   ~~~~~~                                    
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                         
 1784 | 
      |                                             
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                             
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                          
 1788 |   inline
      |   ~~~~~~                                    
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                         
 1792 | 
      |                                             
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                          
 1794 |   inline
      |   ~~~~~~                                    
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1797 |   }
      |   ~                                         
 1798 | 
      |                                             
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                          
 1800 |   inline
      |   ~~~~~~                                    
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                         
 1804 | 
      |                                             
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                          
 1806 |   inline
      |   ~~~~~~                                    
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1809 |   }
      |   ~                                         
 1810 | 
      |                                             
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                          
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1813 |   inline
      |   ~~~~~~                                    
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                         
 1817 | 
      |                                             
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                          
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1820 |   inline
      |   ~~~~~~                                    
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                         
 1824 | 
      |                                             
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                          
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1827 |   inline
      |   ~~~~~~                                    
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1830 |   }
      |   ~                                         
 1831 | 
      |                                             
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                          
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1834 |   inline
      |   ~~~~~~                                    
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                         
 1838 | 
      |                                             
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                             
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                          
 1842 |   inline
      |   ~~~~~~                                    
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                         
 1846 | 
      |                                             
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                          
 1848 |   inline
      |   ~~~~~~                                    
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1851 |   }
      |   ~                                         
 1852 | 
      |                                             
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                          
 1854 |   inline
      |   ~~~~~~                                    
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                         
 1858 | 
      |                                             
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                          
 1860 |   inline
      |   ~~~~~~                                    
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                         
 1864 | 
      |                                             
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                          
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1867 |   inline
      |   ~~~~~~                                    
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                         
 1871 | 
      |                                             
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                          
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1874 |   inline
      |   ~~~~~~                                    
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                         
 1878 | 
      |                                             
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                          
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1881 |   inline
      |   ~~~~~~                                    
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1884 |   }
      |   ~                                         
 1885 | 
      |                                             
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                          
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1888 |   inline
      |   ~~~~~~                                    
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                         
 1892 | 
      |                                             
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                             
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                          
 1896 |   inline
      |   ~~~~~~                                    
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                         
 1900 | 
      |                                             
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                          
 1902 |   inline
      |   ~~~~~~                                    
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1905 |   }
      |   ~                                         
 1906 | 
      |                                             
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                          
 1908 |   inline
      |   ~~~~~~                                    
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                         
 1912 | 
      |                                             
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                          
 1914 |   inline
      |   ~~~~~~                                    
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                         
 1918 | 
      |                                             
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                          
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1921 |   inline
      |   ~~~~~~                                    
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                         
 1925 | 
      |                                             
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                          
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1928 |   inline
      |   ~~~~~~                                    
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1931 |   }
      |   ~                                         
 1932 | 
      |                                             
 1933 |   // BIN_FUNC_6_7_
      |   ~~~~~~~~~~~~~~~~                          
 1934 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1935 |   inline
      |   ~~~~~~                                    
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1937 |     DAINTY_BASE_NUMERIC_OP_X_T_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1938 |   }
      |   ~                                         
 1939 | 
      |                                             
 1940 |   // BIN_FUNC_6_8_
      |   ~~~~~~~~~~~~~~~~                          
 1941 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1942 |   inline
      |   ~~~~~~                                    
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1944 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1945 |   }
      |   ~                                         
 1946 | 
      |                                             
 1947 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1948 | 
      |                                             
 1949 |   // BIN_FUNC_7_1_
      |   ~~~~~~~~~~~~~~~~                          
 1950 |   inline
      |   ~~~~~~                                    
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1952 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1953 |   }
      |   ~                                         
 1954 | 
      |                                             
 1955 |   // BIN_FUNC_7_2_
      |   ~~~~~~~~~~~~~~~~                          
 1956 |   inline
      |   ~~~~~~                                    
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1958 |     DAINTY_BASE_NUMERIC_OP_X_R_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1959 |   }
      |   ~                                         
 1960 | 
      |                                             
 1961 |   // BIN_FUNC_7_3_
      |   ~~~~~~~~~~~~~~~~                          
 1962 |   inline
      |   ~~~~~~                                    
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1964 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1965 |   }
      |   ~                                         
 1966 | 
      |                                             
 1967 |   // BIN_FUNC_7_4_
      |   ~~~~~~~~~~~~~~~~                          
 1968 |   inline
      |   ~~~~~~                                    
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1970 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(^=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1971 |   }
      |   ~                                         
 1972 | 
      |                                             
 1973 |   // BIN_FUNC_7_5_
      |   ~~~~~~~~~~~~~~~~                          
 1974 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1975 |   inline
      |   ~~~~~~                                    
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1977 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1978 |   }
      |   ~                                         
 1979 | 
      |                                             
 1980 |   // BIN_FUNC_7_6_
      |   ~~~~~~~~~~~~~~~~                          
 1981 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1982 |   inline
      |   ~~~~~~                                    
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1984 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1985 |   }
      |   ~                                         
 1986 | 
      |                                             
 1987 |   // BIN_FUNC_7_7_
      |   ~~~~~~~~~~~~~~~~                          
 1988 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1989 |   inline
      |   ~~~~~~                                    
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1991 |     DAINTY_BASE_NUMERIC_OP_X_T_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1992 |   }
      |   ~                                         
 1993 | 
      |                                             
 1994 |   // BIN_FUNC_7_8_
      |   ~~~~~~~~~~~~~~~~                          
 1995 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1996 |   inline
      |   ~~~~~~                                    
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1998 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1999 |   }
      |   ~                                         
 2000 | 
      |                                             
 2001 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2002 | 
      |                                             
 2003 |   // BIN_FUNC_8_
      |   ~~~~~~~~~~~~~~                            
 2004 |   inline
      |   ~~~~~~                                    
 2005 |   t_binary operator>>(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2006 |     DAINTY_BASE_NUMERIC_OP_X_T_(>>=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2007 |   }
      |   ~                                         
 2008 | 
      |                                             
 2009 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2010 | 
      |                                             
 2011 |   // BIN_FUNC_9_
      |   ~~~~~~~~~~~~~~                            
 2012 |   inline
      |   ~~~~~~                                    
 2013 |   t_binary operator<<(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2014 |     DAINTY_BASE_NUMERIC_OP_X_T_(<<=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2015 |   }
      |   ~                                         
 2016 | 
      |                                             
 2017 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2018 | 
      |                                             
 2019 |   // BIN_FUNC_10_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2020 |   inline
      |   ~~~~~~                                    
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2022 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2023 |   }
      |   ~                                         
 2024 | 
      |                                             
 2025 |   // BIN_FUNC_10_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2026 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2027 |   inline
      |   ~~~~~~                                    
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2029 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2030 |   }
      |   ~                                         
 2031 | 
      |                                             
 2032 |   // BIN_FUNC_10_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2033 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2034 |   inline
      |   ~~~~~~                                    
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2036 |     return rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2037 |   }
      |   ~                                         
 2038 | 
      |                                             
 2039 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2040 | 
      |                                             
 2041 |   // BIN_FUNC_11_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2042 |   inline
      |   ~~~~~~                                    
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2044 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2045 |   }
      |   ~                                         
 2046 | 
      |                                             
 2047 |   // BIN_FUNC_11_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2048 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2049 |   inline
      |   ~~~~~~                                    
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2051 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2052 |   }
      |   ~                                         
 2053 | 
      |                                             
 2054 |   // BIN_FUNC_11_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2055 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2056 |   inline
      |   ~~~~~~                                    
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2058 |     return !rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2059 |   }
      |   ~                                         
 2060 | 
      |                                             
 2061 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2062 | 
      |                                             
 2063 |   // BIN_FUNC_12_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2064 |   inline
      |   ~~~~~~                                    
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2066 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2067 |   }
      |   ~                                         
 2068 | 
      |                                             
 2069 |   // BIN_FUNC_12_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2070 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2071 |   inline
      |   ~~~~~~                                    
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2073 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2074 |   }
      |   ~                                         
 2075 | 
      |                                             
 2076 |   // BIN_FUNC_12_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2077 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2078 |   inline
      |   ~~~~~~                                    
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2080 |     return !rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2081 |   }
      |   ~                                         
 2082 | 
      |                                             
 2083 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2084 | 
      |                                             
 2085 |   // BIN_FUNC_13_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2086 |   inline
      |   ~~~~~~                                    
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2088 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2089 |   }
      |   ~                                         
 2090 | 
      |                                             
 2091 |   // BIN_FUNC_13_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2092 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2093 |   inline
      |   ~~~~~~                                    
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2095 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2096 |   }
      |   ~                                         
 2097 | 
      |                                             
 2098 |   // BIN_FUNC_13_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2099 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2100 |   inline
      |   ~~~~~~                                    
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2102 |     return !rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2103 |   }
      |   ~                                         
 2104 | 
      |                                             
 2105 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2106 | 
      |                                             
 2107 |   // BIN_FUNC_14_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2108 |   inline
      |   ~~~~~~                                    
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2110 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2111 |   }
      |   ~                                         
 2112 | 
      |                                             
 2113 |   // BIN_FUNC_14_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2114 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2115 |   inline
      |   ~~~~~~                                    
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2117 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2118 |   }
      |   ~                                         
 2119 | 
      |                                             
 2120 |   // BIN_FUNC_14_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2121 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2122 |   inline
      |   ~~~~~~                                    
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2124 |     return rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2125 |   }
      |   ~                                         
 2126 | 
      |                                             
 2127 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2128 | 
      |                                             
 2129 |   // BIN_FUNC_15_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2130 |   inline
      |   ~~~~~~                                    
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2132 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2133 |   }
      |   ~                                         
 2134 | 
      |                                             
 2135 |   // BIN_FUNC_15_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2136 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2137 |   inline
      |   ~~~~~~                                    
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2139 |     return !lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2140 |   }
      |   ~                                         
 2141 | 
      |                                             
 2142 |   // BIN_FUNC_15_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2143 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2144 |   inline
      |   ~~~~~~                                    
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2146 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2147 |   }
      |   ~                                         
 2148 | 
      |                                             
 2149 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2150 | 
      |                                             
 2151 |   // INT_FUNC_1_1_
      |   ~~~~~~~~~~~~~~~~                          
 2152 |   inline
      |   ~~~~~~                                    
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2154 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2155 |   }
      |   ~                                         
 2156 | 
      |                                             
 2157 |   // INT_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 2158 |   inline
      |   ~~~~~~                                    
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2160 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2161 |   }
      |   ~                                         
 2162 | 
      |                                             
 2163 |   // INT_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 2164 |   inline
      |   ~~~~~~                                    
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2166 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2167 |   }
      |   ~                                         
 2168 | 
      |                                             
 2169 |   // INT_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 2170 |   inline
      |   ~~~~~~                                    
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2172 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2173 |   }
      |   ~                                         
 2174 | 
      |                                             
 2175 |   // INT_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 2176 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2177 |   inline
      |   ~~~~~~                                    
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2179 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2180 |   }
      |   ~                                         
 2181 | 
      |                                             
 2182 |   // INT_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 2183 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2184 |   inline
      |   ~~~~~~                                    
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2186 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2187 |   }
      |   ~                                         
 2188 | 
      |                                             
 2189 |   // INT_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 2190 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2191 |   inline
      |   ~~~~~~                                    
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2193 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2194 |   }
      |   ~                                         
 2195 | 
      |                                             
 2196 |   // INT_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 2197 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2198 |   inline
      |   ~~~~~~                                    
 2199 |   t_integer operator+(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2200 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2201 |   }
      |   ~                                         
 2202 | 
      |                                             
 2203 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2204 | 
      |                                             
 2205 |   // INT_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 2206 |   inline
      |   ~~~~~~                                    
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2208 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2209 |   }
      |   ~                                         
 2210 | 
      |                                             
 2211 |   // INT_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 2212 |   inline
      |   ~~~~~~                                    
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2214 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2215 |   }
      |   ~                                         
 2216 | 
      |                                             
 2217 |   // INT_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 2218 |   inline
      |   ~~~~~~                                    
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2220 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2221 |   }
      |   ~                                         
 2222 | 
      |                                             
 2223 |   // INT_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 2224 |   inline
      |   ~~~~~~                                    
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2226 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2227 |   }
      |   ~                                         
 2228 | 
      |                                             
 2229 |   // INT_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 2230 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2231 |   inline
      |   ~~~~~~                                    
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2233 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2234 |   }
      |   ~                                         
 2235 | 
      |                                             
 2236 |   // INT_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 2237 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2238 |   inline
      |   ~~~~~~                                    
 2239 |   t_integer operator-(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2240 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2246:23: error: declaration of ‘operator-’ as non-function
 2246 |   t_integer operator-(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2246:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2246 |   t_integer operator-(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2246:39: error: expected primary-expression before ‘rh’
 2246 |   t_integer operator-(x_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2253:29: error: ‘x_integer’ has not been declared
 2253 |   t_integer operator-(T lh, x_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h:2253:13: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator-(T, int)’
 2253 |   t_integer operator-(T lh, x_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2239:13: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator-(T, int)’ previously declared here
 2239 |   t_integer operator-(T lh, R_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2261:23: error: declaration of ‘operator*’ as non-function
 2261 |   t_integer operator*(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2261:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2261 |   t_integer operator*(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2261:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2261 |   t_integer operator*(R_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2267:23: error: declaration of ‘operator*’ as non-function
 2267 |   t_integer operator*(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2267:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2267 |   t_integer operator*(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2267:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2267 |   t_integer operator*(x_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2273:23: error: declaration of ‘operator*’ as non-function
 2273 |   t_integer operator*(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2273:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2273 |   t_integer operator*(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2273:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2273 |   t_integer operator*(R_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2279:23: error: declaration of ‘operator*’ as non-function
 2279 |   t_integer operator*(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2279:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2279 |   t_integer operator*(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2279:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2279 |   t_integer operator*(x_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2286:23: error: declaration of ‘operator*’ as non-function
 2286 |   t_integer operator*(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2286:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2286 |   t_integer operator*(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2286:39: error: expected primary-expression before ‘rh’
 2286 |   t_integer operator*(R_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2293:29: error: ‘R_integer’ has not been declared
 2293 |   t_integer operator*(T lh, R_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_integer dainty::base::numeric::operator*(T, int)’:
../dainty_base_numeric.h:2294:44: error: no match for ‘operator*=’ (operand types are ‘dainty::base::numeric::t_integer’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                        
 1609 | 
      |                                             
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                           
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1613 | 
      |                                             
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                    
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1618 | 
      |                                             
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                           
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1622 | 
      |                                             
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                             
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                           
 1626 |   inline
      |   ~~~~~~                                    
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                         
 1630 | 
      |                                             
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 1632 |   inline
      |   ~~~~~~                                    
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1635 |   }
      |   ~                                         
 1636 | 
      |                                             
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 1638 |   inline
      |   ~~~~~~                                    
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                         
 1642 | 
      |                                             
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 1644 |   inline
      |   ~~~~~~                                    
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                         
 1648 | 
      |                                             
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1651 |   inline
      |   ~~~~~~                                    
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                         
 1655 | 
      |                                             
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1658 |   inline
      |   ~~~~~~                                    
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                         
 1662 | 
      |                                             
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1665 |   inline
      |   ~~~~~~                                    
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1668 |   }
      |   ~                                         
 1669 | 
      |                                             
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1672 |   inline
      |   ~~~~~~                                    
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                         
 1676 | 
      |                                             
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                             
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 1680 |   inline
      |   ~~~~~~                                    
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                         
 1684 | 
      |                                             
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 1686 |   inline
      |   ~~~~~~                                    
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1689 |   }
      |   ~                                         
 1690 | 
      |                                             
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 1692 |   inline
      |   ~~~~~~                                    
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                         
 1696 | 
      |                                             
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 1698 |   inline
      |   ~~~~~~                                    
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1701 |   }
      |   ~                                         
 1702 | 
      |                                             
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1705 |   inline
      |   ~~~~~~                                    
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                         
 1709 | 
      |                                             
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1712 |   inline
      |   ~~~~~~                                    
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                         
 1716 | 
      |                                             
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1719 |   inline
      |   ~~~~~~                                    
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1722 |   }
      |   ~                                         
 1723 | 
      |                                             
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1726 |   inline
      |   ~~~~~~                                    
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                         
 1730 | 
      |                                             
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                             
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 1734 |   inline
      |   ~~~~~~                                    
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                         
 1738 | 
      |                                             
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 1740 |   inline
      |   ~~~~~~                                    
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1743 |   }
      |   ~                                         
 1744 | 
      |                                             
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 1746 |   inline
      |   ~~~~~~                                    
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                         
 1750 | 
      |                                             
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 1752 |   inline
      |   ~~~~~~                                    
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                         
 1756 | 
      |                                             
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1759 |   inline
      |   ~~~~~~                                    
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                         
 1763 | 
      |                                             
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1766 |   inline
      |   ~~~~~~                                    
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                         
 1770 | 
      |                                             
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                          
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1773 |   inline
      |   ~~~~~~                                    
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1776 |   }
      |   ~                                         
 1777 | 
      |                                             
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                          
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1780 |   inline
      |   ~~~~~~                                    
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                         
 1784 | 
      |                                             
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                             
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                          
 1788 |   inline
      |   ~~~~~~                                    
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                         
 1792 | 
      |                                             
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                          
 1794 |   inline
      |   ~~~~~~                                    
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1797 |   }
      |   ~                                         
 1798 | 
      |                                             
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                          
 1800 |   inline
      |   ~~~~~~                                    
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                         
 1804 | 
      |                                             
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                          
 1806 |   inline
      |   ~~~~~~                                    
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1809 |   }
      |   ~                                         
 1810 | 
      |                                             
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                          
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1813 |   inline
      |   ~~~~~~                                    
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                         
 1817 | 
      |                                             
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                          
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1820 |   inline
      |   ~~~~~~                                    
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                         
 1824 | 
      |                                             
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                          
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1827 |   inline
      |   ~~~~~~                                    
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1830 |   }
      |   ~                                         
 1831 | 
      |                                             
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                          
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1834 |   inline
      |   ~~~~~~                                    
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                         
 1838 | 
      |                                             
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                             
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                          
 1842 |   inline
      |   ~~~~~~                                    
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                         
 1846 | 
      |                                             
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                          
 1848 |   inline
      |   ~~~~~~                                    
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1851 |   }
      |   ~                                         
 1852 | 
      |                                             
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                          
 1854 |   inline
      |   ~~~~~~                                    
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                         
 1858 | 
      |                                             
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                          
 1860 |   inline
      |   ~~~~~~                                    
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                         
 1864 | 
      |                                             
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                          
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1867 |   inline
      |   ~~~~~~                                    
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                         
 1871 | 
      |                                             
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                          
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1874 |   inline
      |   ~~~~~~                                    
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                         
 1878 | 
      |                                             
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                          
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1881 |   inline
      |   ~~~~~~                                    
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1884 |   }
      |   ~                                         
 1885 | 
      |                                             
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                          
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1888 |   inline
      |   ~~~~~~                                    
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                         
 1892 | 
      |                                             
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                             
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                          
 1896 |   inline
      |   ~~~~~~                                    
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                         
 1900 | 
      |                                             
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                          
 1902 |   inline
      |   ~~~~~~                                    
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1905 |   }
      |   ~                                         
 1906 | 
      |                                             
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                          
 1908 |   inline
      |   ~~~~~~                                    
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                         
 1912 | 
      |                                             
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                          
 1914 |   inline
      |   ~~~~~~                                    
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                         
 1918 | 
      |                                             
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                          
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1921 |   inline
      |   ~~~~~~                                    
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                         
 1925 | 
      |                                             
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                          
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1928 |   inline
      |   ~~~~~~                                    
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1931 |   }
      |   ~                                         
 1932 | 
      |                                             
 1933 |   // BIN_FUNC_6_7_
      |   ~~~~~~~~~~~~~~~~                          
 1934 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1935 |   inline
      |   ~~~~~~                                    
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1937 |     DAINTY_BASE_NUMERIC_OP_X_T_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1938 |   }
      |   ~                                         
 1939 | 
      |                                             
 1940 |   // BIN_FUNC_6_8_
      |   ~~~~~~~~~~~~~~~~                          
 1941 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1942 |   inline
      |   ~~~~~~                                    
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1944 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1945 |   }
      |   ~                                         
 1946 | 
      |                                             
 1947 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1948 | 
      |                                             
 1949 |   // BIN_FUNC_7_1_
      |   ~~~~~~~~~~~~~~~~                          
 1950 |   inline
      |   ~~~~~~                                    
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1952 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1953 |   }
      |   ~                                         
 1954 | 
      |                                             
 1955 |   // BIN_FUNC_7_2_
      |   ~~~~~~~~~~~~~~~~                          
 1956 |   inline
      |   ~~~~~~                                    
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1958 |     DAINTY_BASE_NUMERIC_OP_X_R_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1959 |   }
      |   ~                                         
 1960 | 
      |                                             
 1961 |   // BIN_FUNC_7_3_
      |   ~~~~~~~~~~~~~~~~                          
 1962 |   inline
      |   ~~~~~~                                    
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1964 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1965 |   }
      |   ~                                         
 1966 | 
      |                                             
 1967 |   // BIN_FUNC_7_4_
      |   ~~~~~~~~~~~~~~~~                          
 1968 |   inline
      |   ~~~~~~                                    
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1970 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(^=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1971 |   }
      |   ~                                         
 1972 | 
      |                                             
 1973 |   // BIN_FUNC_7_5_
      |   ~~~~~~~~~~~~~~~~                          
 1974 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1975 |   inline
      |   ~~~~~~                                    
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1977 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1978 |   }
      |   ~                                         
 1979 | 
      |                                             
 1980 |   // BIN_FUNC_7_6_
      |   ~~~~~~~~~~~~~~~~                          
 1981 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1982 |   inline
      |   ~~~~~~                                    
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1984 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1985 |   }
      |   ~                                         
 1986 | 
      |                                             
 1987 |   // BIN_FUNC_7_7_
      |   ~~~~~~~~~~~~~~~~                          
 1988 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1989 |   inline
      |   ~~~~~~                                    
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1991 |     DAINTY_BASE_NUMERIC_OP_X_T_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1992 |   }
      |   ~                                         
 1993 | 
      |                                             
 1994 |   // BIN_FUNC_7_8_
      |   ~~~~~~~~~~~~~~~~                          
 1995 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1996 |   inline
      |   ~~~~~~                                    
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1998 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1999 |   }
      |   ~                                         
 2000 | 
      |                                             
 2001 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2002 | 
      |                                             
 2003 |   // BIN_FUNC_8_
      |   ~~~~~~~~~~~~~~                            
 2004 |   inline
      |   ~~~~~~                                    
 2005 |   t_binary operator>>(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2006 |     DAINTY_BASE_NUMERIC_OP_X_T_(>>=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2007 |   }
      |   ~                                         
 2008 | 
      |                                             
 2009 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2010 | 
      |                                             
 2011 |   // BIN_FUNC_9_
      |   ~~~~~~~~~~~~~~                            
 2012 |   inline
      |   ~~~~~~                                    
 2013 |   t_binary operator<<(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2014 |     DAINTY_BASE_NUMERIC_OP_X_T_(<<=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2015 |   }
      |   ~                                         
 2016 | 
      |                                             
 2017 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2018 | 
      |                                             
 2019 |   // BIN_FUNC_10_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2020 |   inline
      |   ~~~~~~                                    
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2022 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2023 |   }
      |   ~                                         
 2024 | 
      |                                             
 2025 |   // BIN_FUNC_10_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2026 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2027 |   inline
      |   ~~~~~~                                    
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2029 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2030 |   }
      |   ~                                         
 2031 | 
      |                                             
 2032 |   // BIN_FUNC_10_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2033 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2034 |   inline
      |   ~~~~~~                                    
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2036 |     return rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2037 |   }
      |   ~                                         
 2038 | 
      |                                             
 2039 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2040 | 
      |                                             
 2041 |   // BIN_FUNC_11_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2042 |   inline
      |   ~~~~~~                                    
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2044 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2045 |   }
      |   ~                                         
 2046 | 
      |                                             
 2047 |   // BIN_FUNC_11_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2048 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2049 |   inline
      |   ~~~~~~                                    
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2051 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2052 |   }
      |   ~                                         
 2053 | 
      |                                             
 2054 |   // BIN_FUNC_11_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2055 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2056 |   inline
      |   ~~~~~~                                    
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2058 |     return !rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2059 |   }
      |   ~                                         
 2060 | 
      |                                             
 2061 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2062 | 
      |                                             
 2063 |   // BIN_FUNC_12_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2064 |   inline
      |   ~~~~~~                                    
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2066 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2067 |   }
      |   ~                                         
 2068 | 
      |                                             
 2069 |   // BIN_FUNC_12_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2070 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2071 |   inline
      |   ~~~~~~                                    
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2073 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2074 |   }
      |   ~                                         
 2075 | 
      |                                             
 2076 |   // BIN_FUNC_12_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2077 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2078 |   inline
      |   ~~~~~~                                    
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2080 |     return !rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2081 |   }
      |   ~                                         
 2082 | 
      |                                             
 2083 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2084 | 
      |                                             
 2085 |   // BIN_FUNC_13_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2086 |   inline
      |   ~~~~~~                                    
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2088 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2089 |   }
      |   ~                                         
 2090 | 
      |                                             
 2091 |   // BIN_FUNC_13_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2092 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2093 |   inline
      |   ~~~~~~                                    
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2095 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2096 |   }
      |   ~                                         
 2097 | 
      |                                             
 2098 |   // BIN_FUNC_13_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2099 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2100 |   inline
      |   ~~~~~~                                    
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2102 |     return !rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2103 |   }
      |   ~                                         
 2104 | 
      |                                             
 2105 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2106 | 
      |                                             
 2107 |   // BIN_FUNC_14_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2108 |   inline
      |   ~~~~~~                                    
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2110 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2111 |   }
      |   ~                                         
 2112 | 
      |                                             
 2113 |   // BIN_FUNC_14_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2114 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2115 |   inline
      |   ~~~~~~                                    
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2117 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2118 |   }
      |   ~                                         
 2119 | 
      |                                             
 2120 |   // BIN_FUNC_14_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2121 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2122 |   inline
      |   ~~~~~~                                    
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2124 |     return rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2125 |   }
      |   ~                                         
 2126 | 
      |                                             
 2127 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2128 | 
      |                                             
 2129 |   // BIN_FUNC_15_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2130 |   inline
      |   ~~~~~~                                    
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2132 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2133 |   }
      |   ~                                         
 2134 | 
      |                                             
 2135 |   // BIN_FUNC_15_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2136 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2137 |   inline
      |   ~~~~~~                                    
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2139 |     return !lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2140 |   }
      |   ~                                         
 2141 | 
      |                                             
 2142 |   // BIN_FUNC_15_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2143 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2144 |   inline
      |   ~~~~~~                                    
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2146 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2147 |   }
      |   ~                                         
 2148 | 
      |                                             
 2149 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2150 | 
      |                                             
 2151 |   // INT_FUNC_1_1_
      |   ~~~~~~~~~~~~~~~~                          
 2152 |   inline
      |   ~~~~~~                                    
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2154 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2155 |   }
      |   ~                                         
 2156 | 
      |                                             
 2157 |   // INT_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 2158 |   inline
      |   ~~~~~~                                    
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2160 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2161 |   }
      |   ~                                         
 2162 | 
      |                                             
 2163 |   // INT_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 2164 |   inline
      |   ~~~~~~                                    
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2166 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2167 |   }
      |   ~                                         
 2168 | 
      |                                             
 2169 |   // INT_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 2170 |   inline
      |   ~~~~~~                                    
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2172 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2173 |   }
      |   ~                                         
 2174 | 
      |                                             
 2175 |   // INT_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 2176 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2177 |   inline
      |   ~~~~~~                                    
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2179 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2180 |   }
      |   ~                                         
 2181 | 
      |                                             
 2182 |   // INT_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 2183 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2184 |   inline
      |   ~~~~~~                                    
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2186 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2187 |   }
      |   ~                                         
 2188 | 
      |                                             
 2189 |   // INT_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 2190 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2191 |   inline
      |   ~~~~~~                                    
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2193 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2194 |   }
      |   ~                                         
 2195 | 
      |                                             
 2196 |   // INT_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 2197 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2198 |   inline
      |   ~~~~~~                                    
 2199 |   t_integer operator+(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2200 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2201 |   }
      |   ~                                         
 2202 | 
      |                                             
 2203 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2204 | 
      |                                             
 2205 |   // INT_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 2206 |   inline
      |   ~~~~~~                                    
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2208 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2209 |   }
      |   ~                                         
 2210 | 
      |                                             
 2211 |   // INT_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 2212 |   inline
      |   ~~~~~~                                    
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2214 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2215 |   }
      |   ~                                         
 2216 | 
      |                                             
 2217 |   // INT_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 2218 |   inline
      |   ~~~~~~                                    
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2220 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2221 |   }
      |   ~                                         
 2222 | 
      |                                             
 2223 |   // INT_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 2224 |   inline
      |   ~~~~~~                                    
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2226 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2227 |   }
      |   ~                                         
 2228 | 
      |                                             
 2229 |   // INT_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 2230 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2231 |   inline
      |   ~~~~~~                                    
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2233 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2234 |   }
      |   ~                                         
 2235 | 
      |                                             
 2236 |   // INT_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 2237 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2238 |   inline
      |   ~~~~~~                                    
 2239 |   t_integer operator-(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2240 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2241 |   }
      |   ~                                         
 2242 | 
      |                                             
 2243 |   // INT_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 2244 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2245 |   inline
      |   ~~~~~~                                    
 2246 |   t_integer operator-(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2247 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2248 |   }
      |   ~                                         
 2249 | 
      |                                             
 2250 |   // INT_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 2251 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2252 |   inline
      |   ~~~~~~                                    
 2253 |   t_integer operator-(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2254 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2255 |   }
      |   ~                                         
 2256 | 
      |                                             
 2257 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2258 | 
      |                                             
 2259 |   // INT_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 2260 |   inline
      |   ~~~~~~                                    
 2261 |   t_integer operator*(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2262 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2263 |   }
      |   ~                                         
 2264 | 
      |                                             
 2265 |   // INT_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 2266 |   inline
      |   ~~~~~~                                    
 2267 |   t_integer operator*(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2268 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2269 |   }
      |   ~                                         
 2270 | 
      |                                             
 2271 |   // INT_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 2272 |   inline
      |   ~~~~~~                                    
 2273 |   t_integer operator*(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2274 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2275 |   }
      |   ~                                         
 2276 | 
      |                                             
 2277 |   // INT_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 2278 |   inline
      |   ~~~~~~                                    
 2279 |   t_integer operator*(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2280 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2281 |   }
      |   ~                                         
 2282 | 
      |                                             
 2283 |   // INT_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 2284 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2285 |   inline
      |   ~~~~~~                                    
 2286 |   t_integer operator*(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2287 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2288 |   }
      |   ~                                         
 2289 | 
      |                                             
 2290 |   // INT_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 2291 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2292 |   inline
      |   ~~~~~~                                    
 2293 |   t_integer operator*(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2294 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2300:23: error: declaration of ‘operator*’ as non-function
 2300 |   t_integer operator*(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2300:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2300 |   t_integer operator*(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2300:39: error: expected primary-expression before ‘rh’
 2300 |   t_integer operator*(x_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2307:29: error: ‘x_integer’ has not been declared
 2307 |   t_integer operator*(T lh, x_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h:2307:13: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator*(T, int)’
 2307 |   t_integer operator*(T lh, x_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2293:13: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator*(T, int)’ previously declared here
 2293 |   t_integer operator*(T lh, R_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2315:23: error: declaration of ‘operator/’ as non-function
 2315 |   t_integer operator/(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2315:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2315 |   t_integer operator/(R_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2315:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2315 |   t_integer operator/(R_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2321:23: error: declaration of ‘operator/’ as non-function
 2321 |   t_integer operator/(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2321:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2321 |   t_integer operator/(x_integer lh, R_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2321:37: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2321 |   t_integer operator/(x_integer lh, R_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2327:23: error: declaration of ‘operator/’ as non-function
 2327 |   t_integer operator/(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2327:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2327 |   t_integer operator/(R_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2327:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2327 |   t_integer operator/(R_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2333:23: error: declaration of ‘operator/’ as non-function
 2333 |   t_integer operator/(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2333:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2333 |   t_integer operator/(x_integer lh, x_integer rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2333:37: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2333 |   t_integer operator/(x_integer lh, x_integer rh) noexcept {
      |                                     ^~~~~~~~~
      |                                     t_integer
../dainty_base_numeric.h:2340:23: error: declaration of ‘operator/’ as non-function
 2340 |   t_integer operator/(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2340:23: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2340 |   t_integer operator/(R_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2340:39: error: expected primary-expression before ‘rh’
 2340 |   t_integer operator/(R_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2347:29: error: ‘R_integer’ has not been declared
 2347 |   t_integer operator/(T lh, R_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h: In function ‘dainty::base::numeric::t_integer dainty::base::numeric::operator/(T, int)’:
../dainty_base_numeric.h:2348:44: error: no match for ‘operator/=’ (operand types are ‘dainty::base::numeric::t_integer’ and ‘int’)
 1607 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1608 |       return result;
      |       ~~~~~~~~~~~~~~                        
 1609 | 
      |                                             
 1610 |   #define DAINTY_BASE_NUMERIC_OP_X_T_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1611 |       lh op rh; \
      |       ~~~~~~~~~~~                           
 1612 |       return util::x_cast(lh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1613 | 
      |                                             
 1614 |   #define DAINTY_BASE_NUMERIC_OP_T_X_(type, op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1615 |       type result(lh); \
      |       ~~~~~~~~~~~~~~~~~~                    
 1616 |       result op rh; \
      |       ~~~~~~~~~~~~~~~                       
 1617 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1618 | 
      |                                             
 1619 |   #define DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(op, lh, rh) \
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1620 |       rh op lh; \
      |       ~~~~~~~~~~~                           
 1621 |       return util::x_cast(rh);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~              
 1622 | 
      |                                             
 1623 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1624 | 
      |                                             
 1625 |   // BIN_FUNC_1_1
      |   ~~~~~~~~~~~~~~~                           
 1626 |   inline
      |   ~~~~~~                                    
 1627 |   t_binary operator+(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1628 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1629 |   }
      |   ~                                         
 1630 | 
      |                                             
 1631 |   // BIN_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 1632 |   inline
      |   ~~~~~~                                    
 1633 |   t_binary operator+(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1634 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1635 |   }
      |   ~                                         
 1636 | 
      |                                             
 1637 |   // BIN_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 1638 |   inline
      |   ~~~~~~                                    
 1639 |   t_binary operator+(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1640 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1641 |   }
      |   ~                                         
 1642 | 
      |                                             
 1643 |   // BIN_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 1644 |   inline
      |   ~~~~~~                                    
 1645 |   t_binary operator+(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1646 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1647 |   }
      |   ~                                         
 1648 | 
      |                                             
 1649 |   // BIN_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 1650 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1651 |   inline
      |   ~~~~~~                                    
 1652 |   t_binary operator+(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1653 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1654 |   }
      |   ~                                         
 1655 | 
      |                                             
 1656 |   // BIN_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 1657 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1658 |   inline
      |   ~~~~~~                                    
 1659 |   t_binary operator+(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1660 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1661 |   }
      |   ~                                         
 1662 | 
      |                                             
 1663 |   // BIN_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 1664 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1665 |   inline
      |   ~~~~~~                                    
 1666 |   t_binary operator+(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1667 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1668 |   }
      |   ~                                         
 1669 | 
      |                                             
 1670 |   // BIN_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 1671 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1672 |   inline
      |   ~~~~~~                                    
 1673 |   t_binary operator+(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1674 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1675 |   }
      |   ~                                         
 1676 | 
      |                                             
 1677 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1678 | 
      |                                             
 1679 |   // BIN_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 1680 |   inline
      |   ~~~~~~                                    
 1681 |   t_binary operator-(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1682 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1683 |   }
      |   ~                                         
 1684 | 
      |                                             
 1685 |   // BIN_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 1686 |   inline
      |   ~~~~~~                                    
 1687 |   t_binary operator-(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1688 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1689 |   }
      |   ~                                         
 1690 | 
      |                                             
 1691 |   // BIN_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 1692 |   inline
      |   ~~~~~~                                    
 1693 |   t_binary operator-(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1694 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1695 |   }
      |   ~                                         
 1696 | 
      |                                             
 1697 |   // BIN_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 1698 |   inline
      |   ~~~~~~                                    
 1699 |   t_binary operator-(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1700 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1701 |   }
      |   ~                                         
 1702 | 
      |                                             
 1703 |   // BIN_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 1704 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1705 |   inline
      |   ~~~~~~                                    
 1706 |   t_binary operator-(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1707 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1708 |   }
      |   ~                                         
 1709 | 
      |                                             
 1710 |   // BIN_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 1711 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1712 |   inline
      |   ~~~~~~                                    
 1713 |   t_binary operator-(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1714 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1715 |   }
      |   ~                                         
 1716 | 
      |                                             
 1717 |   // BIN_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 1718 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1719 |   inline
      |   ~~~~~~                                    
 1720 |   t_binary operator-(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1721 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1722 |   }
      |   ~                                         
 1723 | 
      |                                             
 1724 |   // BIN_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 1725 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1726 |   inline
      |   ~~~~~~                                    
 1727 |   t_binary operator-(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1728 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1729 |   }
      |   ~                                         
 1730 | 
      |                                             
 1731 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1732 | 
      |                                             
 1733 |   // BIN_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 1734 |   inline
      |   ~~~~~~                                    
 1735 |   t_binary operator*(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1736 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1737 |   }
      |   ~                                         
 1738 | 
      |                                             
 1739 |   // BIN_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 1740 |   inline
      |   ~~~~~~                                    
 1741 |   t_binary operator*(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1742 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1743 |   }
      |   ~                                         
 1744 | 
      |                                             
 1745 |   // BIN_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 1746 |   inline
      |   ~~~~~~                                    
 1747 |   t_binary operator*(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1748 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1749 |   }
      |   ~                                         
 1750 | 
      |                                             
 1751 |   // BIN_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 1752 |   inline
      |   ~~~~~~                                    
 1753 |   t_binary operator*(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1754 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1755 |   }
      |   ~                                         
 1756 | 
      |                                             
 1757 |   // BIN_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 1758 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1759 |   inline
      |   ~~~~~~                                    
 1760 |   t_binary operator*(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1761 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1762 |   }
      |   ~                                         
 1763 | 
      |                                             
 1764 |   // BIN_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 1765 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1766 |   inline
      |   ~~~~~~                                    
 1767 |   t_binary operator*(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1768 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1769 |   }
      |   ~                                         
 1770 | 
      |                                             
 1771 |   // BIN_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                          
 1772 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1773 |   inline
      |   ~~~~~~                                    
 1774 |   t_binary operator*(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1775 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1776 |   }
      |   ~                                         
 1777 | 
      |                                             
 1778 |   // BIN_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                          
 1779 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1780 |   inline
      |   ~~~~~~                                    
 1781 |   t_binary operator*(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1782 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1783 |   }
      |   ~                                         
 1784 | 
      |                                             
 1785 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1786 | 
      |                                             
 1787 |   // BIN_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                          
 1788 |   inline
      |   ~~~~~~                                    
 1789 |   t_binary operator/(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1790 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1791 |   }
      |   ~                                         
 1792 | 
      |                                             
 1793 |   // BIN_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                          
 1794 |   inline
      |   ~~~~~~                                    
 1795 |   t_binary operator/(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1796 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1797 |   }
      |   ~                                         
 1798 | 
      |                                             
 1799 |   // BIN_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                          
 1800 |   inline
      |   ~~~~~~                                    
 1801 |   t_binary operator/(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1802 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1803 |   }
      |   ~                                         
 1804 | 
      |                                             
 1805 |   // BIN_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                          
 1806 |   inline
      |   ~~~~~~                                    
 1807 |   t_binary operator/(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1808 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1809 |   }
      |   ~                                         
 1810 | 
      |                                             
 1811 |   // BIN_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                          
 1812 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1813 |   inline
      |   ~~~~~~                                    
 1814 |   t_binary operator/(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1815 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1816 |   }
      |   ~                                         
 1817 | 
      |                                             
 1818 |   // BIN_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                          
 1819 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1820 |   inline
      |   ~~~~~~                                    
 1821 |   t_binary operator/(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1822 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1823 |   }
      |   ~                                         
 1824 | 
      |                                             
 1825 |   // BIN_FUNC_4_7_
      |   ~~~~~~~~~~~~~~~~                          
 1826 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1827 |   inline
      |   ~~~~~~                                    
 1828 |   t_binary operator/(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1829 |     DAINTY_BASE_NUMERIC_OP_X_T_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1830 |   }
      |   ~                                         
 1831 | 
      |                                             
 1832 |   // BIN_FUNC_4_8_
      |   ~~~~~~~~~~~~~~~~                          
 1833 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1834 |   inline
      |   ~~~~~~                                    
 1835 |   t_binary operator/(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1836 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_binary, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1837 |   }
      |   ~                                         
 1838 | 
      |                                             
 1839 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1840 | 
      |                                             
 1841 |   // BIN_FUNC_5_1_
      |   ~~~~~~~~~~~~~~~~                          
 1842 |   inline
      |   ~~~~~~                                    
 1843 |   t_binary operator|(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1844 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1845 |   }
      |   ~                                         
 1846 | 
      |                                             
 1847 |   // BIN_FUNC_5_2_
      |   ~~~~~~~~~~~~~~~~                          
 1848 |   inline
      |   ~~~~~~                                    
 1849 |   t_binary operator|(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1850 |     DAINTY_BASE_NUMERIC_OP_X_R_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1851 |   }
      |   ~                                         
 1852 | 
      |                                             
 1853 |   // BIN_FUNC_5_3_
      |   ~~~~~~~~~~~~~~~~                          
 1854 |   inline
      |   ~~~~~~                                    
 1855 |   t_binary operator|(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1856 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1857 |   }
      |   ~                                         
 1858 | 
      |                                             
 1859 |   // BIN_FUNC_5_4_
      |   ~~~~~~~~~~~~~~~~                          
 1860 |   inline
      |   ~~~~~~                                    
 1861 |   t_binary operator|(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1862 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(|=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1863 |   }
      |   ~                                         
 1864 | 
      |                                             
 1865 |   // BIN_FUNC_5_5_
      |   ~~~~~~~~~~~~~~~~                          
 1866 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1867 |   inline
      |   ~~~~~~                                    
 1868 |   t_binary operator|(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1869 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1870 |   }
      |   ~                                         
 1871 | 
      |                                             
 1872 |   // BIN_FUNC_5_6_
      |   ~~~~~~~~~~~~~~~~                          
 1873 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1874 |   inline
      |   ~~~~~~                                    
 1875 |   t_binary operator|(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1876 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, |=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1877 |   }
      |   ~                                         
 1878 | 
      |                                             
 1879 |   // BIN_FUNC_5_7_
      |   ~~~~~~~~~~~~~~~~                          
 1880 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1881 |   inline
      |   ~~~~~~                                    
 1882 |   t_binary operator|(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1883 |     DAINTY_BASE_NUMERIC_OP_X_T_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1884 |   }
      |   ~                                         
 1885 | 
      |                                             
 1886 |   // BIN_FUNC_5_8_
      |   ~~~~~~~~~~~~~~~~                          
 1887 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1888 |   inline
      |   ~~~~~~                                    
 1889 |   t_binary operator|(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1890 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(|=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1891 |   }
      |   ~                                         
 1892 | 
      |                                             
 1893 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1894 | 
      |                                             
 1895 |   // BIN_FUNC_6_1_
      |   ~~~~~~~~~~~~~~~~                          
 1896 |   inline
      |   ~~~~~~                                    
 1897 |   t_binary operator&(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1898 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1899 |   }
      |   ~                                         
 1900 | 
      |                                             
 1901 |   // BIN_FUNC_6_2_
      |   ~~~~~~~~~~~~~~~~                          
 1902 |   inline
      |   ~~~~~~                                    
 1903 |   t_binary operator&(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1904 |     DAINTY_BASE_NUMERIC_OP_X_R_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1905 |   }
      |   ~                                         
 1906 | 
      |                                             
 1907 |   // BIN_FUNC_6_3_
      |   ~~~~~~~~~~~~~~~~                          
 1908 |   inline
      |   ~~~~~~                                    
 1909 |   t_binary operator&(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1910 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1911 |   }
      |   ~                                         
 1912 | 
      |                                             
 1913 |   // BIN_FUNC_6_4_
      |   ~~~~~~~~~~~~~~~~                          
 1914 |   inline
      |   ~~~~~~                                    
 1915 |   t_binary operator&(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1916 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(&=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1917 |   }
      |   ~                                         
 1918 | 
      |                                             
 1919 |   // BIN_FUNC_6_5_
      |   ~~~~~~~~~~~~~~~~                          
 1920 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1921 |   inline
      |   ~~~~~~                                    
 1922 |   t_binary operator&(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1923 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1924 |   }
      |   ~                                         
 1925 | 
      |                                             
 1926 |   // BIN_FUNC_6_6_
      |   ~~~~~~~~~~~~~~~~                          
 1927 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1928 |   inline
      |   ~~~~~~                                    
 1929 |   t_binary operator&(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1930 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, &=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1931 |   }
      |   ~                                         
 1932 | 
      |                                             
 1933 |   // BIN_FUNC_6_7_
      |   ~~~~~~~~~~~~~~~~                          
 1934 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1935 |   inline
      |   ~~~~~~                                    
 1936 |   t_binary operator&(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1937 |     DAINTY_BASE_NUMERIC_OP_X_T_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1938 |   }
      |   ~                                         
 1939 | 
      |                                             
 1940 |   // BIN_FUNC_6_8_
      |   ~~~~~~~~~~~~~~~~                          
 1941 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1942 |   inline
      |   ~~~~~~                                    
 1943 |   t_binary operator&(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1944 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(&=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1945 |   }
      |   ~                                         
 1946 | 
      |                                             
 1947 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1948 | 
      |                                             
 1949 |   // BIN_FUNC_7_1_
      |   ~~~~~~~~~~~~~~~~                          
 1950 |   inline
      |   ~~~~~~                                    
 1951 |   t_binary operator^(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1952 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1953 |   }
      |   ~                                         
 1954 | 
      |                                             
 1955 |   // BIN_FUNC_7_2_
      |   ~~~~~~~~~~~~~~~~                          
 1956 |   inline
      |   ~~~~~~                                    
 1957 |   t_binary operator^(x_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1958 |     DAINTY_BASE_NUMERIC_OP_X_R_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1959 |   }
      |   ~                                         
 1960 | 
      |                                             
 1961 |   // BIN_FUNC_7_3_
      |   ~~~~~~~~~~~~~~~~                          
 1962 |   inline
      |   ~~~~~~                                    
 1963 |   t_binary operator^(R_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1964 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1965 |   }
      |   ~                                         
 1966 | 
      |                                             
 1967 |   // BIN_FUNC_7_4_
      |   ~~~~~~~~~~~~~~~~                          
 1968 |   inline
      |   ~~~~~~                                    
 1969 |   t_binary operator^(x_binary lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1970 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(^=, get(lh.get_bits()) > get(rh.get_bits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1971 |   }
      |   ~                                         
 1972 | 
      |                                             
 1973 |   // BIN_FUNC_7_5_
      |   ~~~~~~~~~~~~~~~~                          
 1974 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1975 |   inline
      |   ~~~~~~                                    
 1976 |   t_binary operator^(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1977 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1978 |   }
      |   ~                                         
 1979 | 
      |                                             
 1980 |   // BIN_FUNC_7_6_
      |   ~~~~~~~~~~~~~~~~                          
 1981 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1982 |   inline
      |   ~~~~~~                                    
 1983 |   t_binary operator^(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1984 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_binary, ^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1985 |   }
      |   ~                                         
 1986 | 
      |                                             
 1987 |   // BIN_FUNC_7_7_
      |   ~~~~~~~~~~~~~~~~                          
 1988 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1989 |   inline
      |   ~~~~~~                                    
 1990 |   t_binary operator^(x_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1991 |     DAINTY_BASE_NUMERIC_OP_X_T_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 1992 |   }
      |   ~                                         
 1993 | 
      |                                             
 1994 |   // BIN_FUNC_7_8_
      |   ~~~~~~~~~~~~~~~~                          
 1995 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 1996 |   inline
      |   ~~~~~~                                    
 1997 |   t_binary operator^(T lh, x_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1998 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(^=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1999 |   }
      |   ~                                         
 2000 | 
      |                                             
 2001 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2002 | 
      |                                             
 2003 |   // BIN_FUNC_8_
      |   ~~~~~~~~~~~~~~                            
 2004 |   inline
      |   ~~~~~~                                    
 2005 |   t_binary operator>>(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2006 |     DAINTY_BASE_NUMERIC_OP_X_T_(>>=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2007 |   }
      |   ~                                         
 2008 | 
      |                                             
 2009 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2010 | 
      |                                             
 2011 |   // BIN_FUNC_9_
      |   ~~~~~~~~~~~~~~                            
 2012 |   inline
      |   ~~~~~~                                    
 2013 |   t_binary operator<<(t_binary lh, t_bits n) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2014 |     DAINTY_BASE_NUMERIC_OP_X_T_(<<=, lh, n)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2015 |   }
      |   ~                                         
 2016 | 
      |                                             
 2017 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2018 | 
      |                                             
 2019 |   // BIN_FUNC_10_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2020 |   inline
      |   ~~~~~~                                    
 2021 |   t_bool operator==(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2022 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2023 |   }
      |   ~                                         
 2024 | 
      |                                             
 2025 |   // BIN_FUNC_10_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2026 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2027 |   inline
      |   ~~~~~~                                    
 2028 |   t_bool operator==(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2029 |     return lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2030 |   }
      |   ~                                         
 2031 | 
      |                                             
 2032 |   // BIN_FUNC_10_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2033 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2034 |   inline
      |   ~~~~~~                                    
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2036 |     return rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2037 |   }
      |   ~                                         
 2038 | 
      |                                             
 2039 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2040 | 
      |                                             
 2041 |   // BIN_FUNC_11_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2042 |   inline
      |   ~~~~~~                                    
 2043 |   t_bool operator!=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2044 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2045 |   }
      |   ~                                         
 2046 | 
      |                                             
 2047 |   // BIN_FUNC_11_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2048 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2049 |   inline
      |   ~~~~~~                                    
 2050 |   t_bool operator!=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2051 |     return !lh.is_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2052 |   }
      |   ~                                         
 2053 | 
      |                                             
 2054 |   // BIN_FUNC_11_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2055 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2056 |   inline
      |   ~~~~~~                                    
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2058 |     return !rh.is_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~                
 2059 |   }
      |   ~                                         
 2060 | 
      |                                             
 2061 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2062 | 
      |                                             
 2063 |   // BIN_FUNC_12_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2064 |   inline
      |   ~~~~~~                                    
 2065 |   t_bool operator<(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2066 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2067 |   }
      |   ~                                         
 2068 | 
      |                                             
 2069 |   // BIN_FUNC_12_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2070 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2071 |   inline
      |   ~~~~~~                                    
 2072 |   t_bool operator<(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2073 |     return lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2074 |   }
      |   ~                                         
 2075 | 
      |                                             
 2076 |   // BIN_FUNC_12_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2077 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2078 |   inline
      |   ~~~~~~                                    
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2080 |     return !rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2081 |   }
      |   ~                                         
 2082 | 
      |                                             
 2083 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2084 | 
      |                                             
 2085 |   // BIN_FUNC_13_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2086 |   inline
      |   ~~~~~~                                    
 2087 |   t_bool operator<=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2088 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2089 |   }
      |   ~                                         
 2090 | 
      |                                             
 2091 |   // BIN_FUNC_13_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2092 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2093 |   inline
      |   ~~~~~~                                    
 2094 |   t_bool operator<=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2095 |     return lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2096 |   }
      |   ~                                         
 2097 | 
      |                                             
 2098 |   // BIN_FUNC_13_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2099 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2100 |   inline
      |   ~~~~~~                                    
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2102 |     return !rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2103 |   }
      |   ~                                         
 2104 | 
      |                                             
 2105 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2106 | 
      |                                             
 2107 |   // BIN_FUNC_14_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2108 |   inline
      |   ~~~~~~                                    
 2109 |   t_bool operator>(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2110 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2111 |   }
      |   ~                                         
 2112 | 
      |                                             
 2113 |   // BIN_FUNC_14_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2114 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2115 |   inline
      |   ~~~~~~                                    
 2116 |   t_bool operator>(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2117 |     return !lh.is_less_equal(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
 2118 |   }
      |   ~                                         
 2119 | 
      |                                             
 2120 |   // BIN_FUNC_14_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2121 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2122 |   inline
      |   ~~~~~~                                    
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2124 |     return rh.is_less(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~                  
 2125 |   }
      |   ~                                         
 2126 | 
      |                                             
 2127 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2128 | 
      |                                             
 2129 |   // BIN_FUNC_15_1_
      |   ~~~~~~~~~~~~~~~~~                         
 2130 |   inline
      |   ~~~~~~                                    
 2131 |   t_bool operator>=(R_binary lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2132 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2133 |   }
      |   ~                                         
 2134 | 
      |                                             
 2135 |   // BIN_FUNC_15_2_
      |   ~~~~~~~~~~~~~~~~~                         
 2136 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2137 |   inline
      |   ~~~~~~                                    
 2138 |   t_bool operator>=(R_binary lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2139 |     return !lh.is_less(rh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~                 
 2140 |   }
      |   ~                                         
 2141 | 
      |                                             
 2142 |   // BIN_FUNC_15_3_
      |   ~~~~~~~~~~~~~~~~~                         
 2143 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2144 |   inline
      |   ~~~~~~                                    
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2146 |     return rh.is_less_equal(lh);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
 2147 |   }
      |   ~                                         
 2148 | 
      |                                             
 2149 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2150 | 
      |                                             
 2151 |   // INT_FUNC_1_1_
      |   ~~~~~~~~~~~~~~~~                          
 2152 |   inline
      |   ~~~~~~                                    
 2153 |   t_integer operator+(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2154 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2155 |   }
      |   ~                                         
 2156 | 
      |                                             
 2157 |   // INT_FUNC_1_2_
      |   ~~~~~~~~~~~~~~~~                          
 2158 |   inline
      |   ~~~~~~                                    
 2159 |   t_integer operator+(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2160 |     DAINTY_BASE_NUMERIC_OP_X_R_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2161 |   }
      |   ~                                         
 2162 | 
      |                                             
 2163 |   // INT_FUNC_1_3_
      |   ~~~~~~~~~~~~~~~~                          
 2164 |   inline
      |   ~~~~~~                                    
 2165 |   t_integer operator+(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2166 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2167 |   }
      |   ~                                         
 2168 | 
      |                                             
 2169 |   // INT_FUNC_1_4_
      |   ~~~~~~~~~~~~~~~~                          
 2170 |   inline
      |   ~~~~~~                                    
 2171 |   t_integer operator+(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2172 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(+=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2173 |   }
      |   ~                                         
 2174 | 
      |                                             
 2175 |   // INT_FUNC_1_5_
      |   ~~~~~~~~~~~~~~~~                          
 2176 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2177 |   inline
      |   ~~~~~~                                    
 2178 |   t_integer operator+(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2179 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2180 |   }
      |   ~                                         
 2181 | 
      |                                             
 2182 |   // INT_FUNC_1_6_
      |   ~~~~~~~~~~~~~~~~                          
 2183 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2184 |   inline
      |   ~~~~~~                                    
 2185 |   t_integer operator+(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2186 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, +=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2187 |   }
      |   ~                                         
 2188 | 
      |                                             
 2189 |   // INT_FUNC_1_7_
      |   ~~~~~~~~~~~~~~~~                          
 2190 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2191 |   inline
      |   ~~~~~~                                    
 2192 |   t_integer operator+(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2193 |     DAINTY_BASE_NUMERIC_OP_X_T_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2194 |   }
      |   ~                                         
 2195 | 
      |                                             
 2196 |   // INT_FUNC_1_8_
      |   ~~~~~~~~~~~~~~~~                          
 2197 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2198 |   inline
      |   ~~~~~~                                    
 2199 |   t_integer operator+(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2200 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(+=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2201 |   }
      |   ~                                         
 2202 | 
      |                                             
 2203 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2204 | 
      |                                             
 2205 |   // INT_FUNC_2_1_
      |   ~~~~~~~~~~~~~~~~                          
 2206 |   inline
      |   ~~~~~~                                    
 2207 |   t_integer operator-(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2208 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2209 |   }
      |   ~                                         
 2210 | 
      |                                             
 2211 |   // INT_FUNC_2_2_
      |   ~~~~~~~~~~~~~~~~                          
 2212 |   inline
      |   ~~~~~~                                    
 2213 |   t_integer operator-(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2214 |     DAINTY_BASE_NUMERIC_OP_X_R_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2215 |   }
      |   ~                                         
 2216 | 
      |                                             
 2217 |   // INT_FUNC_2_3_
      |   ~~~~~~~~~~~~~~~~                          
 2218 |   inline
      |   ~~~~~~                                    
 2219 |   t_integer operator-(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2220 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2221 |   }
      |   ~                                         
 2222 | 
      |                                             
 2223 |   // INT_FUNC_2_4_
      |   ~~~~~~~~~~~~~~~~                          
 2224 |   inline
      |   ~~~~~~                                    
 2225 |   t_integer operator-(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2226 |     DAINTY_BASE_NUMERIC_OP_X_X_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2227 |   }
      |   ~                                         
 2228 | 
      |                                             
 2229 |   // INT_FUNC_2_5_
      |   ~~~~~~~~~~~~~~~~                          
 2230 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2231 |   inline
      |   ~~~~~~                                    
 2232 |   t_integer operator-(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2233 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2234 |   }
      |   ~                                         
 2235 | 
      |                                             
 2236 |   // INT_FUNC_2_6_
      |   ~~~~~~~~~~~~~~~~                          
 2237 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2238 |   inline
      |   ~~~~~~                                    
 2239 |   t_integer operator-(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2240 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2241 |   }
      |   ~                                         
 2242 | 
      |                                             
 2243 |   // INT_FUNC_2_7_
      |   ~~~~~~~~~~~~~~~~                          
 2244 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2245 |   inline
      |   ~~~~~~                                    
 2246 |   t_integer operator-(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2247 |     DAINTY_BASE_NUMERIC_OP_X_T_(-=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2248 |   }
      |   ~                                         
 2249 | 
      |                                             
 2250 |   // INT_FUNC_2_8_
      |   ~~~~~~~~~~~~~~~~                          
 2251 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2252 |   inline
      |   ~~~~~~                                    
 2253 |   t_integer operator-(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2254 |     DAINTY_BASE_NUMERIC_OP_T_X_(t_integer, -=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2255 |   }
      |   ~                                         
 2256 | 
      |                                             
 2257 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2258 | 
      |                                             
 2259 |   // INT_FUNC_3_1_
      |   ~~~~~~~~~~~~~~~~                          
 2260 |   inline
      |   ~~~~~~                                    
 2261 |   t_integer operator*(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2262 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2263 |   }
      |   ~                                         
 2264 | 
      |                                             
 2265 |   // INT_FUNC_3_2_
      |   ~~~~~~~~~~~~~~~~                          
 2266 |   inline
      |   ~~~~~~                                    
 2267 |   t_integer operator*(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2268 |     DAINTY_BASE_NUMERIC_OP_X_R_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2269 |   }
      |   ~                                         
 2270 | 
      |                                             
 2271 |   // INT_FUNC_3_3_
      |   ~~~~~~~~~~~~~~~~                          
 2272 |   inline
      |   ~~~~~~                                    
 2273 |   t_integer operator*(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2274 |     DAINTY_BASE_NUMERIC_OP_R_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2275 |   }
      |   ~                                         
 2276 | 
      |                                             
 2277 |   // INT_FUNC_3_4_
      |   ~~~~~~~~~~~~~~~~                          
 2278 |   inline
      |   ~~~~~~                                    
 2279 |   t_integer operator*(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2280 |     DAINTY_BASE_NUMERIC_OP_X_X_COMMUTATIVE_(*=, get(lh.get_digits()) > get(rh.get_digits()), lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2281 |   }
      |   ~                                         
 2282 | 
      |                                             
 2283 |   // INT_FUNC_3_5_
      |   ~~~~~~~~~~~~~~~~                          
 2284 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2285 |   inline
      |   ~~~~~~                                    
 2286 |   t_integer operator*(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2287 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2288 |   }
      |   ~                                         
 2289 | 
      |                                             
 2290 |   // INT_FUNC_3_6_
      |   ~~~~~~~~~~~~~~~~                          
 2291 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2292 |   inline
      |   ~~~~~~                                    
 2293 |   t_integer operator*(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2294 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, *=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2295 |   }
      |   ~                                         
 2296 | 
      |                                             
 2297 |   // INT_FUNC_3_7_
      |   ~~~~~~~~~~~~~~~~                          
 2298 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2299 |   inline
      |   ~~~~~~                                    
 2300 |   t_integer operator*(x_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2301 |     DAINTY_BASE_NUMERIC_OP_X_T_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2302 |   }
      |   ~                                         
 2303 | 
      |                                             
 2304 |   // INT_FUNC_3_8_
      |   ~~~~~~~~~~~~~~~~                          
 2305 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2306 |   inline
      |   ~~~~~~                                    
 2307 |   t_integer operator*(T lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2308 |     DAINTY_BASE_NUMERIC_OP_T_X_COMMUTATIVE_(*=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2309 |   }
      |   ~                                         
 2310 | 
      |                                             
 2311 |   /////////////////////////////////////////////////////////////////////////////
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2312 | 
      |                                             
 2313 |   // INT_FUNC_4_1_
      |   ~~~~~~~~~~~~~~~~                          
 2314 |   inline
      |   ~~~~~~                                    
 2315 |   t_integer operator/(R_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2316 |     DAINTY_BASE_NUMERIC_OP_R_R_(t_integer, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2317 |   }
      |   ~                                         
 2318 | 
      |                                             
 2319 |   // INT_FUNC_4_2_
      |   ~~~~~~~~~~~~~~~~                          
 2320 |   inline
      |   ~~~~~~                                    
 2321 |   t_integer operator/(x_integer lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2322 |     DAINTY_BASE_NUMERIC_OP_X_R_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2323 |   }
      |   ~                                         
 2324 | 
      |                                             
 2325 |   // INT_FUNC_4_3_
      |   ~~~~~~~~~~~~~~~~                          
 2326 |   inline
      |   ~~~~~~                                    
 2327 |   t_integer operator/(R_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2328 |     DAINTY_BASE_NUMERIC_OP_R_X_(t_integer, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2329 |   }
      |   ~                                         
 2330 | 
      |                                             
 2331 |   // INT_FUNC_4_4_
      |   ~~~~~~~~~~~~~~~~                          
 2332 |   inline
      |   ~~~~~~                                    
 2333 |   t_integer operator/(x_integer lh, x_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2334 |     DAINTY_BASE_NUMERIC_OP_X_X_(/=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 2335 |   }
      |   ~                                         
 2336 | 
      |                                             
 2337 |   // INT_FUNC_4_5_
      |   ~~~~~~~~~~~~~~~~                          
 2338 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2339 |   inline
      |   ~~~~~~                                    
 2340 |   t_integer operator/(R_integer lh, T rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2341 |     DAINTY_BASE_NUMERIC_OP_R_T_(t_integer, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2342 |   }
      |   ~                                         
 2343 | 
      |                                             
 2344 |   // INT_FUNC_4_6_
      |   ~~~~~~~~~~~~~~~~                          
 2345 |   template<typename T, t_if_int<T>>
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         
 2346 |   inline
      |   ~~~~~~                                    
 2347 |   t_integer operator/(T lh, R_integer rh) noexcept {
      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2348 |     DAINTY_BASE_NUMERIC_OP_T_R_(t_integer, /=, lh, rh)
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
../dainty_base_numeric.h:1607:14: note: in definition of macro ‘DAINTY_BASE_NUMERIC_OP_T_R_’
 1607 |       result op rh; \
      |              ^~
../dainty_base_numeric.h: At global scope:
../dainty_base_numeric.h:2354:23: error: declaration of ‘operator/’ as non-function
 2354 |   t_integer operator/(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
../dainty_base_numeric.h:2354:23: error: ‘x_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2354 |   t_integer operator/(x_integer lh, T rh) noexcept {
      |                       ^~~~~~~~~
      |                       t_integer
../dainty_base_numeric.h:2354:39: error: expected primary-expression before ‘rh’
 2354 |   t_integer operator/(x_integer lh, T rh) noexcept {
      |                                       ^~
../dainty_base_numeric.h:2361:29: error: ‘x_integer’ has not been declared
 2361 |   t_integer operator/(T lh, x_integer rh) noexcept {
      |                             ^~~~~~~~~
../dainty_base_numeric.h:2361:13: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator/(T, int)’
 2361 |   t_integer operator/(T lh, x_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2347:13: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::numeric::t_integer dainty::base::numeric::operator/(T, int)’ previously declared here
 2347 |   t_integer operator/(T lh, R_integer rh) noexcept {
      |             ^~~~~~~~
../dainty_base_numeric.h:2369:21: error: declaration of ‘operator==’ as non-function
 2369 |   t_bool operator==(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2369:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2369 |   t_bool operator==(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2369:35: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2369 |   t_bool operator==(R_integer lh, R_integer rh) noexcept {
      |                                   ^~~~~~~~~
      |                                   t_integer
../dainty_base_numeric.h:2376:21: error: declaration of ‘operator==’ as non-function
 2376 |   t_bool operator==(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2376:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2376 |   t_bool operator==(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2376:37: error: expected primary-expression before ‘rh’
 2376 |   t_bool operator==(R_integer lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:2383:27: error: ‘R_integer’ has not been declared
 2383 |   t_bool operator==(T lh, R_integer rh) noexcept {
      |                           ^~~~~~~~~
../dainty_base_numeric.h:2383:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator==(T, int)’
 2383 |   t_bool operator==(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2035:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator==(T, int)’ previously declared here
 2035 |   t_bool operator==(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2391:21: error: declaration of ‘operator!=’ as non-function
 2391 |   t_bool operator!=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2391:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2391 |   t_bool operator!=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2391:35: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2391 |   t_bool operator!=(R_integer lh, R_integer rh) noexcept {
      |                                   ^~~~~~~~~
      |                                   t_integer
../dainty_base_numeric.h:2398:21: error: declaration of ‘operator!=’ as non-function
 2398 |   t_bool operator!=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2398:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2398 |   t_bool operator!=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2398:37: error: expected primary-expression before ‘rh’
 2398 |   t_bool operator!=(R_integer lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:2405:27: error: ‘R_integer’ has not been declared
 2405 |   t_bool operator!=(T lh, R_integer rh) noexcept {
      |                           ^~~~~~~~~
../dainty_base_numeric.h:2405:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator!=(T, int)’
 2405 |   t_bool operator!=(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2057:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator!=(T, int)’ previously declared here
 2057 |   t_bool operator!=(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2413:20: error: declaration of ‘operator<’ as non-function
 2413 |   t_bool operator<(R_integer lh, R_integer rh) noexcept {
      |                    ^~~~~~~~~
../dainty_base_numeric.h:2413:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2413 |   t_bool operator<(R_integer lh, R_integer rh) noexcept {
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:2413:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2413 |   t_bool operator<(R_integer lh, R_integer rh) noexcept {
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:2420:20: error: declaration of ‘operator<’ as non-function
 2420 |   t_bool operator<(R_integer lh, T rh) noexcept {
      |                    ^~~~~~~~~
../dainty_base_numeric.h:2420:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2420 |   t_bool operator<(R_integer lh, T rh) noexcept {
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:2420:36: error: expected primary-expression before ‘rh’
 2420 |   t_bool operator<(R_integer lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2427:26: error: ‘R_integer’ has not been declared
 2427 |   t_bool operator<(T lh, R_integer rh) noexcept {
      |                          ^~~~~~~~~
../dainty_base_numeric.h:2427:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator<(T, int)’
 2427 |   t_bool operator<(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2079:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator<(T, int)’ previously declared here
 2079 |   t_bool operator<(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2435:21: error: declaration of ‘operator<=’ as non-function
 2435 |   t_bool operator<=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2435:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2435 |   t_bool operator<=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2435:35: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2435 |   t_bool operator<=(R_integer lh, R_integer rh) noexcept {
      |                                   ^~~~~~~~~
      |                                   t_integer
../dainty_base_numeric.h:2442:21: error: declaration of ‘operator<=’ as non-function
 2442 |   t_bool operator<=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2442:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2442 |   t_bool operator<=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2442:37: error: expected primary-expression before ‘rh’
 2442 |   t_bool operator<=(R_integer lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:2449:27: error: ‘R_integer’ has not been declared
 2449 |   t_bool operator<=(T lh, R_integer rh) noexcept {
      |                           ^~~~~~~~~
../dainty_base_numeric.h:2449:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator<=(T, int)’
 2449 |   t_bool operator<=(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2101:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator<=(T, int)’ previously declared here
 2101 |   t_bool operator<=(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2457:20: error: declaration of ‘operator>’ as non-function
 2457 |   t_bool operator>(R_integer lh, R_integer rh) noexcept {
      |                    ^~~~~~~~~
../dainty_base_numeric.h:2457:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2457 |   t_bool operator>(R_integer lh, R_integer rh) noexcept {
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:2457:34: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2457 |   t_bool operator>(R_integer lh, R_integer rh) noexcept {
      |                                  ^~~~~~~~~
      |                                  t_integer
../dainty_base_numeric.h:2464:20: error: declaration of ‘operator>’ as non-function
 2464 |   t_bool operator>(R_integer lh, T rh) noexcept {
      |                    ^~~~~~~~~
../dainty_base_numeric.h:2464:20: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2464 |   t_bool operator>(R_integer lh, T rh) noexcept {
      |                    ^~~~~~~~~
      |                    t_integer
../dainty_base_numeric.h:2464:36: error: expected primary-expression before ‘rh’
 2464 |   t_bool operator>(R_integer lh, T rh) noexcept {
      |                                    ^~
../dainty_base_numeric.h:2471:26: error: ‘R_integer’ has not been declared
 2471 |   t_bool operator>(T lh, R_integer rh) noexcept {
      |                          ^~~~~~~~~
../dainty_base_numeric.h:2471:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator>(T, int)’
 2471 |   t_bool operator>(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2123:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator>(T, int)’ previously declared here
 2123 |   t_bool operator>(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2479:21: error: declaration of ‘operator>=’ as non-function
 2479 |   t_bool operator>=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2479:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2479 |   t_bool operator>=(R_integer lh, R_integer rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2479:35: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2479 |   t_bool operator>=(R_integer lh, R_integer rh) noexcept {
      |                                   ^~~~~~~~~
      |                                   t_integer
../dainty_base_numeric.h:2486:21: error: declaration of ‘operator>=’ as non-function
 2486 |   t_bool operator>=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
../dainty_base_numeric.h:2486:21: error: ‘R_integer’ was not declared in this scope; did you mean ‘t_integer’?
 2486 |   t_bool operator>=(R_integer lh, T rh) noexcept {
      |                     ^~~~~~~~~
      |                     t_integer
../dainty_base_numeric.h:2486:37: error: expected primary-expression before ‘rh’
 2486 |   t_bool operator>=(R_integer lh, T rh) noexcept {
      |                                     ^~
../dainty_base_numeric.h:2493:27: error: ‘R_integer’ has not been declared
 2493 |   t_bool operator>=(T lh, R_integer rh) noexcept {
      |                           ^~~~~~~~~
../dainty_base_numeric.h:2493:10: error: redefinition of ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator>=(T, int)’
 2493 |   t_bool operator>=(T lh, R_integer rh) noexcept {
      |          ^~~~~~~~
../dainty_base_numeric.h:2145:10: note: ‘template<class T, typename dainty::base::traits::impl_::help_::t_if_then_<typename dainty::base::traits::impl_::help_::t_and_<typename dainty::base::traits::impl_::help_::t_or_<typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_signed_integral_, T>::t_result, typename dainty::base::traits::impl_::help_::t_each_is_true_<dainty::base::traits::impl_::help_::t_is_unsigned_integral_, T>::t_result>::t_result, typename dainty::base::traits::impl_::help_::t_is_truth_<(sizeof (T) <= sizeof (unsigned char))>::t_result>::t_result, dainty::base::types::t_well_formed>::t_value <anonymous> > dainty::base::types::t_bool dainty::base::numeric::operator>=(T, int)’ previously declared here
 2145 |   t_bool operator>=(T lh, R_binary rh) noexcept {
      |          ^~~~~~~~
dainty_base_numeric_test1.cpp: In function ‘int main()’:
dainty_base_numeric_test1.cpp:80:8: warning: value computed is not used [-Wunused-value]
   80 |   bin1 + (impl_::t_pvalue_)1;
      |   ~~~~~^~~~~~~~~~~~~~~~~~~~~
dainty_base_numeric_test1.cpp:82:7: warning: value computed is not used [-Wunused-value]
   82 |   bin + bin1;
      |   ~~~~^~~~~~
dainty_base_numeric_test1.cpp:91:20: error: conversion from ‘dainty::base::numeric::t_binary’ to non-scalar type ‘dainty::base::numeric::t_integer’ requested
   91 |   t_integer int1 = bin4;
      |                    ^~~~
dainty_base_numeric_test1.cpp:598:17: error: ‘R_binary’ does not name a type
  598 |     static_cast<R_binary>(int4).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:607:17: error: ‘R_binary’ does not name a type
  607 |     static_cast<R_binary>(int3).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:617:17: error: ‘R_binary’ does not name a type
  617 |     static_cast<R_binary>(int4).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:626:17: error: ‘R_binary’ does not name a type
  626 |     static_cast<R_binary>(int3).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:636:17: error: ‘R_binary’ does not name a type
  636 |     static_cast<R_binary>(int4).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:641:17: error: ‘R_binary’ does not name a type
  641 |     static_cast<R_binary>(int1).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:644:11: error: no match for ‘operator*=’ (operand types are ‘dainty::base::numeric::t_integer’ and ‘dainty::base::numeric::impl_::t_pvalue_’ {aka ‘unsigned char’})
  644 |      int1 *= static_cast<impl_::t_pvalue_>(127);
      |      ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dainty_base_numeric_test1.cpp:646:19: error: ‘R_binary’ does not name a type
  646 |       static_cast<R_binary>(int1).display();
      |                   ^~~~~~~~
dainty_base_numeric_test1.cpp:650:17: error: ‘R_binary’ does not name a type
  650 |     static_cast<R_binary>(int1).display();
      |                 ^~~~~~~~
dainty_base_numeric_test1.cpp:69:8: warning: unused variable ‘on’ [-Wunused-variable]
   69 |   bool on  = bin[t_bit{63}];
      |        ^~
dainty_base_numeric_test1.cpp:70:8: warning: unused variable ‘on1’ [-Wunused-variable]
   70 |   bool on1 = bin[t_bit{126}];
      |        ^~~
